/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var google_protobuf_descriptor_pb = require('google-protobuf/google/protobuf/descriptor_pb.js');
goog.exportSymbol('proto.jspb.test.CloneExtension', null, global);
goog.exportSymbol('proto.jspb.test.Complex', null, global);
goog.exportSymbol('proto.jspb.test.Complex.Nested', null, global);
goog.exportSymbol('proto.jspb.test.Deeply', null, global);
goog.exportSymbol('proto.jspb.test.Deeply.Nested', null, global);
goog.exportSymbol('proto.jspb.test.Deeply.Nested.Message', null, global);
goog.exportSymbol('proto.jspb.test.DefaultValues', null, global);
goog.exportSymbol('proto.jspb.test.DefaultValues.Enum', null, global);
goog.exportSymbol('proto.jspb.test.Empty', null, global);
goog.exportSymbol('proto.jspb.test.EnumContainer', null, global);
goog.exportSymbol('proto.jspb.test.FloatingPointFields', null, global);
goog.exportSymbol('proto.jspb.test.HasExtensions', null, global);
goog.exportSymbol('proto.jspb.test.IndirectExtension', null, global);
goog.exportSymbol('proto.jspb.test.Int64Types', null, global);
goog.exportSymbol('proto.jspb.test.IsExtension', null, global);
goog.exportSymbol('proto.jspb.test.MapValueEnumNoBinary', null, global);
goog.exportSymbol('proto.jspb.test.MapValueMessageNoBinary', null, global);
goog.exportSymbol('proto.jspb.test.OptionalFields', null, global);
goog.exportSymbol('proto.jspb.test.OptionalFields.Nested', null, global);
goog.exportSymbol('proto.jspb.test.OuterEnum', null, global);
goog.exportSymbol('proto.jspb.test.OuterMessage', null, global);
goog.exportSymbol('proto.jspb.test.OuterMessage.Complex', null, global);
goog.exportSymbol('proto.jspb.test.Simple1', null, global);
goog.exportSymbol('proto.jspb.test.Simple2', null, global);
goog.exportSymbol('proto.jspb.test.SpecialCases', null, global);
goog.exportSymbol('proto.jspb.test.TestClone', null, global);
goog.exportSymbol('proto.jspb.test.TestEndsWithBytes', null, global);
goog.exportSymbol('proto.jspb.test.TestGroup', null, global);
goog.exportSymbol('proto.jspb.test.TestGroup.OptionalGroup', null, global);
goog.exportSymbol('proto.jspb.test.TestGroup.RepeatedGroup', null, global);
goog.exportSymbol('proto.jspb.test.TestGroup.RequiredGroup', null, global);
goog.exportSymbol('proto.jspb.test.TestGroup1', null, global);
goog.exportSymbol('proto.jspb.test.TestMapFieldsNoBinary', null, global);
goog.exportSymbol('proto.jspb.test.TestMessageWithOneof', null, global);
goog.exportSymbol('proto.jspb.test.TestReservedNames', null, global);
goog.exportSymbol('proto.jspb.test.TestReservedNamesExtension', null, global);
goog.exportSymbol('proto.jspb.test.simple1', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.jspb.test.Empty = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.jspb.test.Empty, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.jspb.test.Empty.displayName = 'proto.jspb.test.Empty';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.jspb.test.Empty.prototype.toObject = function(opt_includeInstance) {
  return proto.jspb.test.Empty.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.jspb.test.Empty} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.jspb.test.Empty.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.jspb.test.Empty}
 */
proto.jspb.test.Empty.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.jspb.test.Empty;
  return proto.jspb.test.Empty.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.jspb.test.Empty} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.jspb.test.Empty}
 */
proto.jspb.test.Empty.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.jspb.test.Empty.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.jspb.test.Empty.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.jspb.test.Empty} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.jspb.test.Empty.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.jspb.test.EnumContainer = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.jspb.test.EnumContainer, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.jspb.test.EnumContainer.displayName = 'proto.jspb.test.EnumContainer';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.jspb.test.EnumContainer.prototype.toObject = function(opt_includeInstance) {
  return proto.jspb.test.EnumContainer.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.jspb.test.EnumContainer} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.jspb.test.EnumContainer.toObject = function(includeInstance, msg) {
  var f, obj = {
    outerEnum: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.jspb.test.EnumContainer}
 */
proto.jspb.test.EnumContainer.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.jspb.test.EnumContainer;
  return proto.jspb.test.EnumContainer.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.jspb.test.EnumContainer} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.jspb.test.EnumContainer}
 */
proto.jspb.test.EnumContainer.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.jspb.test.OuterEnum} */ (reader.readEnum());
      msg.setOuterEnum(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.jspb.test.EnumContainer.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.jspb.test.EnumContainer.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.jspb.test.EnumContainer} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.jspb.test.EnumContainer.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!proto.jspb.test.OuterEnum} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeEnum(
      1,
      f
    );
  }
};


/**
 * optional OuterEnum outer_enum = 1;
 * @return {!proto.jspb.test.OuterEnum}
 */
proto.jspb.test.EnumContainer.prototype.getOuterEnum = function() {
  return /** @type {!proto.jspb.test.OuterEnum} */ (jspb.Message.getFieldWithDefault(this, 1, 1));
};


/** @param {!proto.jspb.test.OuterEnum} value */
proto.jspb.test.EnumContainer.prototype.setOuterEnum = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.jspb.test.EnumContainer.prototype.clearOuterEnum = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.jspb.test.EnumContainer.prototype.hasOuterEnum = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.jspb.test.Simple1 = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.jspb.test.Simple1.repeatedFields_, null);
};
goog.inherits(proto.jspb.test.Simple1, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.jspb.test.Simple1.displayName = 'proto.jspb.test.Simple1';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.jspb.test.Simple1.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.jspb.test.Simple1.prototype.toObject = function(opt_includeInstance) {
  return proto.jspb.test.Simple1.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.jspb.test.Simple1} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.jspb.test.Simple1.toObject = function(includeInstance, msg) {
  var f, obj = {
    aString: jspb.Message.getField(msg, 1),
    aRepeatedStringList: jspb.Message.getRepeatedField(msg, 2),
    aBoolean: jspb.Message.getField(msg, 3)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.jspb.test.Simple1}
 */
proto.jspb.test.Simple1.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.jspb.test.Simple1;
  return proto.jspb.test.Simple1.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.jspb.test.Simple1} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.jspb.test.Simple1}
 */
proto.jspb.test.Simple1.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAString(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.addARepeatedString(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setABoolean(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.jspb.test.Simple1.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.jspb.test.Simple1.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.jspb.test.Simple1} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.jspb.test.Simple1.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getARepeatedStringList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeBool(
      3,
      f
    );
  }
};


/**
 * required string a_string = 1;
 * @return {string}
 */
proto.jspb.test.Simple1.prototype.getAString = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.jspb.test.Simple1.prototype.setAString = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.jspb.test.Simple1.prototype.clearAString = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.jspb.test.Simple1.prototype.hasAString = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated string a_repeated_string = 2;
 * @return {!Array<string>}
 */
proto.jspb.test.Simple1.prototype.getARepeatedStringList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2));
};


/** @param {!Array<string>} value */
proto.jspb.test.Simple1.prototype.setARepeatedStringList = function(value) {
  jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.jspb.test.Simple1.prototype.addARepeatedString = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


proto.jspb.test.Simple1.prototype.clearARepeatedStringList = function() {
  this.setARepeatedStringList([]);
};


/**
 * optional bool a_boolean = 3;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.jspb.test.Simple1.prototype.getABoolean = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 3, false));
};


/** @param {boolean} value */
proto.jspb.test.Simple1.prototype.setABoolean = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.jspb.test.Simple1.prototype.clearABoolean = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.jspb.test.Simple1.prototype.hasABoolean = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.jspb.test.Simple2 = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.jspb.test.Simple2.repeatedFields_, null);
};
goog.inherits(proto.jspb.test.Simple2, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.jspb.test.Simple2.displayName = 'proto.jspb.test.Simple2';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.jspb.test.Simple2.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.jspb.test.Simple2.prototype.toObject = function(opt_includeInstance) {
  return proto.jspb.test.Simple2.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.jspb.test.Simple2} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.jspb.test.Simple2.toObject = function(includeInstance, msg) {
  var f, obj = {
    aString: jspb.Message.getField(msg, 1),
    aRepeatedStringList: jspb.Message.getRepeatedField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.jspb.test.Simple2}
 */
proto.jspb.test.Simple2.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.jspb.test.Simple2;
  return proto.jspb.test.Simple2.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.jspb.test.Simple2} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.jspb.test.Simple2}
 */
proto.jspb.test.Simple2.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAString(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.addARepeatedString(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.jspb.test.Simple2.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.jspb.test.Simple2.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.jspb.test.Simple2} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.jspb.test.Simple2.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getARepeatedStringList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
};


/**
 * required string a_string = 1;
 * @return {string}
 */
proto.jspb.test.Simple2.prototype.getAString = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.jspb.test.Simple2.prototype.setAString = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.jspb.test.Simple2.prototype.clearAString = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.jspb.test.Simple2.prototype.hasAString = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated string a_repeated_string = 2;
 * @return {!Array<string>}
 */
proto.jspb.test.Simple2.prototype.getARepeatedStringList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2));
};


/** @param {!Array<string>} value */
proto.jspb.test.Simple2.prototype.setARepeatedStringList = function(value) {
  jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.jspb.test.Simple2.prototype.addARepeatedString = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


proto.jspb.test.Simple2.prototype.clearARepeatedStringList = function() {
  this.setARepeatedStringList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.jspb.test.SpecialCases = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.jspb.test.SpecialCases, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.jspb.test.SpecialCases.displayName = 'proto.jspb.test.SpecialCases';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.jspb.test.SpecialCases.prototype.toObject = function(opt_includeInstance) {
  return proto.jspb.test.SpecialCases.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.jspb.test.SpecialCases} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.jspb.test.SpecialCases.toObject = function(includeInstance, msg) {
  var f, obj = {
    normal: jspb.Message.getField(msg, 1),
    pb_default: jspb.Message.getField(msg, 2),
    pb_function: jspb.Message.getField(msg, 3),
    pb_var: jspb.Message.getField(msg, 4)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.jspb.test.SpecialCases}
 */
proto.jspb.test.SpecialCases.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.jspb.test.SpecialCases;
  return proto.jspb.test.SpecialCases.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.jspb.test.SpecialCases} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.jspb.test.SpecialCases}
 */
proto.jspb.test.SpecialCases.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setNormal(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDefault(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setFunction(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setVar(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.jspb.test.SpecialCases.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.jspb.test.SpecialCases.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.jspb.test.SpecialCases} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.jspb.test.SpecialCases.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * required string normal = 1;
 * @return {string}
 */
proto.jspb.test.SpecialCases.prototype.getNormal = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.jspb.test.SpecialCases.prototype.setNormal = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.jspb.test.SpecialCases.prototype.clearNormal = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.jspb.test.SpecialCases.prototype.hasNormal = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required string default = 2;
 * @return {string}
 */
proto.jspb.test.SpecialCases.prototype.getDefault = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.jspb.test.SpecialCases.prototype.setDefault = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.jspb.test.SpecialCases.prototype.clearDefault = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.jspb.test.SpecialCases.prototype.hasDefault = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required string function = 3;
 * @return {string}
 */
proto.jspb.test.SpecialCases.prototype.getFunction = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.jspb.test.SpecialCases.prototype.setFunction = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.jspb.test.SpecialCases.prototype.clearFunction = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.jspb.test.SpecialCases.prototype.hasFunction = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * required string var = 4;
 * @return {string}
 */
proto.jspb.test.SpecialCases.prototype.getVar = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.jspb.test.SpecialCases.prototype.setVar = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.jspb.test.SpecialCases.prototype.clearVar = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.jspb.test.SpecialCases.prototype.hasVar = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.jspb.test.OptionalFields = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.jspb.test.OptionalFields.repeatedFields_, null);
};
goog.inherits(proto.jspb.test.OptionalFields, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.jspb.test.OptionalFields.displayName = 'proto.jspb.test.OptionalFields';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.jspb.test.OptionalFields.repeatedFields_ = [4,5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.jspb.test.OptionalFields.prototype.toObject = function(opt_includeInstance) {
  return proto.jspb.test.OptionalFields.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.jspb.test.OptionalFields} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.jspb.test.OptionalFields.toObject = function(includeInstance, msg) {
  var f, obj = {
    aString: jspb.Message.getField(msg, 1),
    aBool: jspb.Message.getField(msg, 2),
    aNestedMessage: (f = msg.getANestedMessage()) && proto.jspb.test.OptionalFields.Nested.toObject(includeInstance, f),
    aRepeatedMessageList: jspb.Message.toObjectList(msg.getARepeatedMessageList(),
    proto.jspb.test.OptionalFields.Nested.toObject, includeInstance),
    aRepeatedStringList: jspb.Message.getRepeatedField(msg, 5)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.jspb.test.OptionalFields}
 */
proto.jspb.test.OptionalFields.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.jspb.test.OptionalFields;
  return proto.jspb.test.OptionalFields.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.jspb.test.OptionalFields} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.jspb.test.OptionalFields}
 */
proto.jspb.test.OptionalFields.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAString(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setABool(value);
      break;
    case 3:
      var value = new proto.jspb.test.OptionalFields.Nested;
      reader.readMessage(value,proto.jspb.test.OptionalFields.Nested.deserializeBinaryFromReader);
      msg.setANestedMessage(value);
      break;
    case 4:
      var value = new proto.jspb.test.OptionalFields.Nested;
      reader.readMessage(value,proto.jspb.test.OptionalFields.Nested.deserializeBinaryFromReader);
      msg.addARepeatedMessage(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.addARepeatedString(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.jspb.test.OptionalFields.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.jspb.test.OptionalFields.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.jspb.test.OptionalFields} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.jspb.test.OptionalFields.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getANestedMessage();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.jspb.test.OptionalFields.Nested.serializeBinaryToWriter
    );
  }
  f = message.getARepeatedMessageList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.jspb.test.OptionalFields.Nested.serializeBinaryToWriter
    );
  }
  f = message.getARepeatedStringList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      5,
      f
    );
  }
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.jspb.test.OptionalFields.Nested = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.jspb.test.OptionalFields.Nested, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.jspb.test.OptionalFields.Nested.displayName = 'proto.jspb.test.OptionalFields.Nested';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.jspb.test.OptionalFields.Nested.prototype.toObject = function(opt_includeInstance) {
  return proto.jspb.test.OptionalFields.Nested.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.jspb.test.OptionalFields.Nested} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.jspb.test.OptionalFields.Nested.toObject = function(includeInstance, msg) {
  var f, obj = {
    anInt: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.jspb.test.OptionalFields.Nested}
 */
proto.jspb.test.OptionalFields.Nested.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.jspb.test.OptionalFields.Nested;
  return proto.jspb.test.OptionalFields.Nested.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.jspb.test.OptionalFields.Nested} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.jspb.test.OptionalFields.Nested}
 */
proto.jspb.test.OptionalFields.Nested.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setAnInt(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.jspb.test.OptionalFields.Nested.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.jspb.test.OptionalFields.Nested.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.jspb.test.OptionalFields.Nested} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.jspb.test.OptionalFields.Nested.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * optional int32 an_int = 1;
 * @return {number}
 */
proto.jspb.test.OptionalFields.Nested.prototype.getAnInt = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.jspb.test.OptionalFields.Nested.prototype.setAnInt = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.jspb.test.OptionalFields.Nested.prototype.clearAnInt = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.jspb.test.OptionalFields.Nested.prototype.hasAnInt = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string a_string = 1;
 * @return {string}
 */
proto.jspb.test.OptionalFields.prototype.getAString = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.jspb.test.OptionalFields.prototype.setAString = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.jspb.test.OptionalFields.prototype.clearAString = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.jspb.test.OptionalFields.prototype.hasAString = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required bool a_bool = 2;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.jspb.test.OptionalFields.prototype.getABool = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 2, false));
};


/** @param {boolean} value */
proto.jspb.test.OptionalFields.prototype.setABool = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.jspb.test.OptionalFields.prototype.clearABool = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.jspb.test.OptionalFields.prototype.hasABool = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Nested a_nested_message = 3;
 * @return {?proto.jspb.test.OptionalFields.Nested}
 */
proto.jspb.test.OptionalFields.prototype.getANestedMessage = function() {
  return /** @type{?proto.jspb.test.OptionalFields.Nested} */ (
    jspb.Message.getWrapperField(this, proto.jspb.test.OptionalFields.Nested, 3));
};


/** @param {?proto.jspb.test.OptionalFields.Nested|undefined} value */
proto.jspb.test.OptionalFields.prototype.setANestedMessage = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.jspb.test.OptionalFields.prototype.clearANestedMessage = function() {
  this.setANestedMessage(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.jspb.test.OptionalFields.prototype.hasANestedMessage = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * repeated Nested a_repeated_message = 4;
 * @return {!Array<!proto.jspb.test.OptionalFields.Nested>}
 */
proto.jspb.test.OptionalFields.prototype.getARepeatedMessageList = function() {
  return /** @type{!Array<!proto.jspb.test.OptionalFields.Nested>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.jspb.test.OptionalFields.Nested, 4));
};


/** @param {!Array<!proto.jspb.test.OptionalFields.Nested>} value */
proto.jspb.test.OptionalFields.prototype.setARepeatedMessageList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.jspb.test.OptionalFields.Nested=} opt_value
 * @param {number=} opt_index
 * @return {!proto.jspb.test.OptionalFields.Nested}
 */
proto.jspb.test.OptionalFields.prototype.addARepeatedMessage = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.jspb.test.OptionalFields.Nested, opt_index);
};


proto.jspb.test.OptionalFields.prototype.clearARepeatedMessageList = function() {
  this.setARepeatedMessageList([]);
};


/**
 * repeated string a_repeated_string = 5;
 * @return {!Array<string>}
 */
proto.jspb.test.OptionalFields.prototype.getARepeatedStringList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 5));
};


/** @param {!Array<string>} value */
proto.jspb.test.OptionalFields.prototype.setARepeatedStringList = function(value) {
  jspb.Message.setField(this, 5, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.jspb.test.OptionalFields.prototype.addARepeatedString = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 5, value, opt_index);
};


proto.jspb.test.OptionalFields.prototype.clearARepeatedStringList = function() {
  this.setARepeatedStringList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.jspb.test.HasExtensions = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, 4, null, null);
};
goog.inherits(proto.jspb.test.HasExtensions, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.jspb.test.HasExtensions.displayName = 'proto.jspb.test.HasExtensions';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.jspb.test.HasExtensions.prototype.toObject = function(opt_includeInstance) {
  return proto.jspb.test.HasExtensions.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.jspb.test.HasExtensions} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.jspb.test.HasExtensions.toObject = function(includeInstance, msg) {
  var f, obj = {
    str1: jspb.Message.getField(msg, 1),
    str2: jspb.Message.getField(msg, 2),
    str3: jspb.Message.getField(msg, 3)
  };

  jspb.Message.toObjectExtension(/** @type {!jspb.Message} */ (msg), obj,
      proto.jspb.test.HasExtensions.extensions, proto.jspb.test.HasExtensions.prototype.getExtension,
      includeInstance);
  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.jspb.test.HasExtensions}
 */
proto.jspb.test.HasExtensions.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.jspb.test.HasExtensions;
  return proto.jspb.test.HasExtensions.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.jspb.test.HasExtensions} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.jspb.test.HasExtensions}
 */
proto.jspb.test.HasExtensions.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setStr1(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setStr2(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setStr3(value);
      break;
    default:
      jspb.Message.readBinaryExtension(msg, reader, proto.jspb.test.HasExtensions.extensionsBinary,
        proto.jspb.test.HasExtensions.prototype.getExtension,
        proto.jspb.test.HasExtensions.prototype.setExtension);
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.jspb.test.HasExtensions.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.jspb.test.HasExtensions.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.jspb.test.HasExtensions} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.jspb.test.HasExtensions.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  jspb.Message.serializeBinaryExtensions(message, writer,
    proto.jspb.test.HasExtensions.extensionsBinary, proto.jspb.test.HasExtensions.prototype.getExtension);
};


/**
 * optional string str1 = 1;
 * @return {string}
 */
proto.jspb.test.HasExtensions.prototype.getStr1 = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.jspb.test.HasExtensions.prototype.setStr1 = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.jspb.test.HasExtensions.prototype.clearStr1 = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.jspb.test.HasExtensions.prototype.hasStr1 = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string str2 = 2;
 * @return {string}
 */
proto.jspb.test.HasExtensions.prototype.getStr2 = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.jspb.test.HasExtensions.prototype.setStr2 = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.jspb.test.HasExtensions.prototype.clearStr2 = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.jspb.test.HasExtensions.prototype.hasStr2 = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string str3 = 3;
 * @return {string}
 */
proto.jspb.test.HasExtensions.prototype.getStr3 = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.jspb.test.HasExtensions.prototype.setStr3 = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.jspb.test.HasExtensions.prototype.clearStr3 = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.jspb.test.HasExtensions.prototype.hasStr3 = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * The extensions registered with this message class. This is a map of
 * extension field number to fieldInfo object.
 *
 * For example:
 *     { 123: {fieldIndex: 123, fieldName: {my_field_name: 0}, ctor: proto.example.MyMessage} }
 *
 * fieldName contains the JsCompiler renamed field name property so that it
 * works in OPTIMIZED mode.
 *
 * @type {!Object<number, jspb.ExtensionFieldInfo>}
 */
proto.jspb.test.HasExtensions.extensions = {};


/**
 * The extensions registered with this message class. This is a map of
 * extension field number to fieldInfo object.
 *
 * For example:
 *     { 123: {fieldIndex: 123, fieldName: {my_field_name: 0}, ctor: proto.example.MyMessage} }
 *
 * fieldName contains the JsCompiler renamed field name property so that it
 * works in OPTIMIZED mode.
 *
 * @type {!Object<number, jspb.ExtensionFieldBinaryInfo>}
 */
proto.jspb.test.HasExtensions.extensionsBinary = {};


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.jspb.test.Complex = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.jspb.test.Complex.repeatedFields_, null);
};
goog.inherits(proto.jspb.test.Complex, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.jspb.test.Complex.displayName = 'proto.jspb.test.Complex';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.jspb.test.Complex.repeatedFields_ = [5,7];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.jspb.test.Complex.prototype.toObject = function(opt_includeInstance) {
  return proto.jspb.test.Complex.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.jspb.test.Complex} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.jspb.test.Complex.toObject = function(includeInstance, msg) {
  var f, obj = {
    aString: jspb.Message.getField(msg, 1),
    anOutOfOrderBool: jspb.Message.getField(msg, 9),
    aNestedMessage: (f = msg.getANestedMessage()) && proto.jspb.test.Complex.Nested.toObject(includeInstance, f),
    aRepeatedMessageList: jspb.Message.toObjectList(msg.getARepeatedMessageList(),
    proto.jspb.test.Complex.Nested.toObject, includeInstance),
    aRepeatedStringList: jspb.Message.getRepeatedField(msg, 7)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.jspb.test.Complex}
 */
proto.jspb.test.Complex.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.jspb.test.Complex;
  return proto.jspb.test.Complex.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.jspb.test.Complex} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.jspb.test.Complex}
 */
proto.jspb.test.Complex.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAString(value);
      break;
    case 9:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setAnOutOfOrderBool(value);
      break;
    case 4:
      var value = new proto.jspb.test.Complex.Nested;
      reader.readMessage(value,proto.jspb.test.Complex.Nested.deserializeBinaryFromReader);
      msg.setANestedMessage(value);
      break;
    case 5:
      var value = new proto.jspb.test.Complex.Nested;
      reader.readMessage(value,proto.jspb.test.Complex.Nested.deserializeBinaryFromReader);
      msg.addARepeatedMessage(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.addARepeatedString(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.jspb.test.Complex.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.jspb.test.Complex.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.jspb.test.Complex} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.jspb.test.Complex.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 9));
  if (f != null) {
    writer.writeBool(
      9,
      f
    );
  }
  f = message.getANestedMessage();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.jspb.test.Complex.Nested.serializeBinaryToWriter
    );
  }
  f = message.getARepeatedMessageList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.jspb.test.Complex.Nested.serializeBinaryToWriter
    );
  }
  f = message.getARepeatedStringList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      7,
      f
    );
  }
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.jspb.test.Complex.Nested = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.jspb.test.Complex.Nested, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.jspb.test.Complex.Nested.displayName = 'proto.jspb.test.Complex.Nested';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.jspb.test.Complex.Nested.prototype.toObject = function(opt_includeInstance) {
  return proto.jspb.test.Complex.Nested.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.jspb.test.Complex.Nested} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.jspb.test.Complex.Nested.toObject = function(includeInstance, msg) {
  var f, obj = {
    anInt: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.jspb.test.Complex.Nested}
 */
proto.jspb.test.Complex.Nested.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.jspb.test.Complex.Nested;
  return proto.jspb.test.Complex.Nested.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.jspb.test.Complex.Nested} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.jspb.test.Complex.Nested}
 */
proto.jspb.test.Complex.Nested.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setAnInt(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.jspb.test.Complex.Nested.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.jspb.test.Complex.Nested.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.jspb.test.Complex.Nested} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.jspb.test.Complex.Nested.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * required int32 an_int = 2;
 * @return {number}
 */
proto.jspb.test.Complex.Nested.prototype.getAnInt = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.jspb.test.Complex.Nested.prototype.setAnInt = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.jspb.test.Complex.Nested.prototype.clearAnInt = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.jspb.test.Complex.Nested.prototype.hasAnInt = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required string a_string = 1;
 * @return {string}
 */
proto.jspb.test.Complex.prototype.getAString = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.jspb.test.Complex.prototype.setAString = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.jspb.test.Complex.prototype.clearAString = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.jspb.test.Complex.prototype.hasAString = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required bool an_out_of_order_bool = 9;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.jspb.test.Complex.prototype.getAnOutOfOrderBool = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 9, false));
};


/** @param {boolean} value */
proto.jspb.test.Complex.prototype.setAnOutOfOrderBool = function(value) {
  jspb.Message.setField(this, 9, value);
};


proto.jspb.test.Complex.prototype.clearAnOutOfOrderBool = function() {
  jspb.Message.setField(this, 9, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.jspb.test.Complex.prototype.hasAnOutOfOrderBool = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional Nested a_nested_message = 4;
 * @return {?proto.jspb.test.Complex.Nested}
 */
proto.jspb.test.Complex.prototype.getANestedMessage = function() {
  return /** @type{?proto.jspb.test.Complex.Nested} */ (
    jspb.Message.getWrapperField(this, proto.jspb.test.Complex.Nested, 4));
};


/** @param {?proto.jspb.test.Complex.Nested|undefined} value */
proto.jspb.test.Complex.prototype.setANestedMessage = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.jspb.test.Complex.prototype.clearANestedMessage = function() {
  this.setANestedMessage(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.jspb.test.Complex.prototype.hasANestedMessage = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * repeated Nested a_repeated_message = 5;
 * @return {!Array<!proto.jspb.test.Complex.Nested>}
 */
proto.jspb.test.Complex.prototype.getARepeatedMessageList = function() {
  return /** @type{!Array<!proto.jspb.test.Complex.Nested>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.jspb.test.Complex.Nested, 5));
};


/** @param {!Array<!proto.jspb.test.Complex.Nested>} value */
proto.jspb.test.Complex.prototype.setARepeatedMessageList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.jspb.test.Complex.Nested=} opt_value
 * @param {number=} opt_index
 * @return {!proto.jspb.test.Complex.Nested}
 */
proto.jspb.test.Complex.prototype.addARepeatedMessage = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.jspb.test.Complex.Nested, opt_index);
};


proto.jspb.test.Complex.prototype.clearARepeatedMessageList = function() {
  this.setARepeatedMessageList([]);
};


/**
 * repeated string a_repeated_string = 7;
 * @return {!Array<string>}
 */
proto.jspb.test.Complex.prototype.getARepeatedStringList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 7));
};


/** @param {!Array<string>} value */
proto.jspb.test.Complex.prototype.setARepeatedStringList = function(value) {
  jspb.Message.setField(this, 7, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.jspb.test.Complex.prototype.addARepeatedString = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 7, value, opt_index);
};


proto.jspb.test.Complex.prototype.clearARepeatedStringList = function() {
  this.setARepeatedStringList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.jspb.test.OuterMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.jspb.test.OuterMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.jspb.test.OuterMessage.displayName = 'proto.jspb.test.OuterMessage';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.jspb.test.OuterMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.jspb.test.OuterMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.jspb.test.OuterMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.jspb.test.OuterMessage.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.jspb.test.OuterMessage}
 */
proto.jspb.test.OuterMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.jspb.test.OuterMessage;
  return proto.jspb.test.OuterMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.jspb.test.OuterMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.jspb.test.OuterMessage}
 */
proto.jspb.test.OuterMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.jspb.test.OuterMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.jspb.test.OuterMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.jspb.test.OuterMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.jspb.test.OuterMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.jspb.test.OuterMessage.Complex = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.jspb.test.OuterMessage.Complex, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.jspb.test.OuterMessage.Complex.displayName = 'proto.jspb.test.OuterMessage.Complex';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.jspb.test.OuterMessage.Complex.prototype.toObject = function(opt_includeInstance) {
  return proto.jspb.test.OuterMessage.Complex.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.jspb.test.OuterMessage.Complex} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.jspb.test.OuterMessage.Complex.toObject = function(includeInstance, msg) {
  var f, obj = {
    innerComplexField: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.jspb.test.OuterMessage.Complex}
 */
proto.jspb.test.OuterMessage.Complex.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.jspb.test.OuterMessage.Complex;
  return proto.jspb.test.OuterMessage.Complex.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.jspb.test.OuterMessage.Complex} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.jspb.test.OuterMessage.Complex}
 */
proto.jspb.test.OuterMessage.Complex.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setInnerComplexField(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.jspb.test.OuterMessage.Complex.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.jspb.test.OuterMessage.Complex.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.jspb.test.OuterMessage.Complex} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.jspb.test.OuterMessage.Complex.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * optional int32 inner_complex_field = 1;
 * @return {number}
 */
proto.jspb.test.OuterMessage.Complex.prototype.getInnerComplexField = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.jspb.test.OuterMessage.Complex.prototype.setInnerComplexField = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.jspb.test.OuterMessage.Complex.prototype.clearInnerComplexField = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.jspb.test.OuterMessage.Complex.prototype.hasInnerComplexField = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.jspb.test.IsExtension = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.jspb.test.IsExtension, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.jspb.test.IsExtension.displayName = 'proto.jspb.test.IsExtension';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.jspb.test.IsExtension.prototype.toObject = function(opt_includeInstance) {
  return proto.jspb.test.IsExtension.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.jspb.test.IsExtension} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.jspb.test.IsExtension.toObject = function(includeInstance, msg) {
  var f, obj = {
    ext1: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.jspb.test.IsExtension}
 */
proto.jspb.test.IsExtension.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.jspb.test.IsExtension;
  return proto.jspb.test.IsExtension.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.jspb.test.IsExtension} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.jspb.test.IsExtension}
 */
proto.jspb.test.IsExtension.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setExt1(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.jspb.test.IsExtension.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.jspb.test.IsExtension.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.jspb.test.IsExtension} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.jspb.test.IsExtension.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
};



/**
 * A tuple of {field number, class constructor} for the extension
 * field named `extField`.
 * @type {!jspb.ExtensionFieldInfo<!proto.jspb.test.IsExtension>}
 */
proto.jspb.test.IsExtension.extField = new jspb.ExtensionFieldInfo(
    100,
    {extField: 0},
    proto.jspb.test.IsExtension,
     /** @type {?function((boolean|undefined),!jspb.Message=): !Object} */ (
         proto.jspb.test.IsExtension.toObject),
    0);

proto.jspb.test.HasExtensions.extensionsBinary[100] = new jspb.ExtensionFieldBinaryInfo(
    proto.jspb.test.IsExtension.extField,
    jspb.BinaryReader.prototype.readMessage,
    jspb.BinaryWriter.prototype.writeMessage,
    proto.jspb.test.IsExtension.serializeBinaryToWriter,
    proto.jspb.test.IsExtension.deserializeBinaryFromReader,
    false);
// This registers the extension field with the extended class, so that
// toObject() will function correctly.
proto.jspb.test.HasExtensions.extensions[100] = proto.jspb.test.IsExtension.extField;

/**
 * optional string ext1 = 1;
 * @return {string}
 */
proto.jspb.test.IsExtension.prototype.getExt1 = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.jspb.test.IsExtension.prototype.setExt1 = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.jspb.test.IsExtension.prototype.clearExt1 = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.jspb.test.IsExtension.prototype.hasExt1 = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * A tuple of {field number, class constructor} for the extension
 * field named `extField`.
 * @type {!jspb.ExtensionFieldInfo<!proto.jspb.test.IsExtension>}
 */
proto.jspb.test.IsExtension.extField = new jspb.ExtensionFieldInfo(
    100,
    {extField: 0},
    proto.jspb.test.IsExtension,
     /** @type {?function((boolean|undefined),!jspb.Message=): !Object} */ (
         proto.jspb.test.IsExtension.toObject),
    0);

proto.jspb.test.HasExtensions.extensionsBinary[100] = new jspb.ExtensionFieldBinaryInfo(
    proto.jspb.test.IsExtension.extField,
    jspb.BinaryReader.prototype.readMessage,
    jspb.BinaryWriter.prototype.writeMessage,
    proto.jspb.test.IsExtension.serializeBinaryToWriter,
    proto.jspb.test.IsExtension.deserializeBinaryFromReader,
    false);
// This registers the extension field with the extended class, so that
// toObject() will function correctly.
proto.jspb.test.HasExtensions.extensions[100] = proto.jspb.test.IsExtension.extField;


/**
 * A tuple of {field number, class constructor} for the extension
 * field named `simpleOption`.
 * @type {!jspb.ExtensionFieldInfo<string>}
 */
proto.jspb.test.IsExtension.simpleOption = new jspb.ExtensionFieldInfo(
    42113038,
    {simpleOption: 0},
    null,
     /** @type {?function((boolean|undefined),!jspb.Message=): !Object} */ (
         null),
    0);

google_protobuf_descriptor_pb.EnumOptions.extensionsBinary[42113038] = new jspb.ExtensionFieldBinaryInfo(
    proto.jspb.test.IsExtension.simpleOption,
    jspb.BinaryReader.prototype.readString,
    jspb.BinaryWriter.prototype.writeString,
    undefined,
    undefined,
    false);
// This registers the extension field with the extended class, so that
// toObject() will function correctly.
google_protobuf_descriptor_pb.EnumOptions.extensions[42113038] = proto.jspb.test.IsExtension.simpleOption;


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.jspb.test.IndirectExtension = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.jspb.test.IndirectExtension, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.jspb.test.IndirectExtension.displayName = 'proto.jspb.test.IndirectExtension';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.jspb.test.IndirectExtension.prototype.toObject = function(opt_includeInstance) {
  return proto.jspb.test.IndirectExtension.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.jspb.test.IndirectExtension} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.jspb.test.IndirectExtension.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.jspb.test.IndirectExtension}
 */
proto.jspb.test.IndirectExtension.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.jspb.test.IndirectExtension;
  return proto.jspb.test.IndirectExtension.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.jspb.test.IndirectExtension} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.jspb.test.IndirectExtension}
 */
proto.jspb.test.IndirectExtension.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.jspb.test.IndirectExtension.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.jspb.test.IndirectExtension.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.jspb.test.IndirectExtension} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.jspb.test.IndirectExtension.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * A tuple of {field number, class constructor} for the extension
 * field named `simple`.
 * @type {!jspb.ExtensionFieldInfo<!proto.jspb.test.Simple1>}
 */
proto.jspb.test.IndirectExtension.simple = new jspb.ExtensionFieldInfo(
    101,
    {simple: 0},
    proto.jspb.test.Simple1,
     /** @type {?function((boolean|undefined),!jspb.Message=): !Object} */ (
         proto.jspb.test.Simple1.toObject),
    0);

proto.jspb.test.HasExtensions.extensionsBinary[101] = new jspb.ExtensionFieldBinaryInfo(
    proto.jspb.test.IndirectExtension.simple,
    jspb.BinaryReader.prototype.readMessage,
    jspb.BinaryWriter.prototype.writeMessage,
    proto.jspb.test.Simple1.serializeBinaryToWriter,
    proto.jspb.test.Simple1.deserializeBinaryFromReader,
    false);
// This registers the extension field with the extended class, so that
// toObject() will function correctly.
proto.jspb.test.HasExtensions.extensions[101] = proto.jspb.test.IndirectExtension.simple;


/**
 * A tuple of {field number, class constructor} for the extension
 * field named `str`.
 * @type {!jspb.ExtensionFieldInfo<string>}
 */
proto.jspb.test.IndirectExtension.str = new jspb.ExtensionFieldInfo(
    102,
    {str: 0},
    null,
     /** @type {?function((boolean|undefined),!jspb.Message=): !Object} */ (
         null),
    0);

proto.jspb.test.HasExtensions.extensionsBinary[102] = new jspb.ExtensionFieldBinaryInfo(
    proto.jspb.test.IndirectExtension.str,
    jspb.BinaryReader.prototype.readString,
    jspb.BinaryWriter.prototype.writeString,
    undefined,
    undefined,
    false);
// This registers the extension field with the extended class, so that
// toObject() will function correctly.
proto.jspb.test.HasExtensions.extensions[102] = proto.jspb.test.IndirectExtension.str;


/**
 * A tuple of {field number, class constructor} for the extension
 * field named `repeatedStrList`.
 * @type {!jspb.ExtensionFieldInfo<!Array<string>>}
 */
proto.jspb.test.IndirectExtension.repeatedStrList = new jspb.ExtensionFieldInfo(
    103,
    {repeatedStrList: 0},
    null,
     /** @type {?function((boolean|undefined),!jspb.Message=): !Object} */ (
         null),
    1);

proto.jspb.test.HasExtensions.extensionsBinary[103] = new jspb.ExtensionFieldBinaryInfo(
    proto.jspb.test.IndirectExtension.repeatedStrList,
    jspb.BinaryReader.prototype.readString,
    jspb.BinaryWriter.prototype.writeRepeatedString,
    undefined,
    undefined,
    false);
// This registers the extension field with the extended class, so that
// toObject() will function correctly.
proto.jspb.test.HasExtensions.extensions[103] = proto.jspb.test.IndirectExtension.repeatedStrList;


/**
 * A tuple of {field number, class constructor} for the extension
 * field named `repeatedSimpleList`.
 * @type {!jspb.ExtensionFieldInfo<!Array<!proto.jspb.test.Simple1>>}
 */
proto.jspb.test.IndirectExtension.repeatedSimpleList = new jspb.ExtensionFieldInfo(
    104,
    {repeatedSimpleList: 0},
    proto.jspb.test.Simple1,
     /** @type {?function((boolean|undefined),!jspb.Message=): !Object} */ (
         proto.jspb.test.Simple1.toObject),
    1);

proto.jspb.test.HasExtensions.extensionsBinary[104] = new jspb.ExtensionFieldBinaryInfo(
    proto.jspb.test.IndirectExtension.repeatedSimpleList,
    jspb.BinaryReader.prototype.readMessage,
    jspb.BinaryWriter.prototype.writeRepeatedMessage,
    proto.jspb.test.Simple1.serializeBinaryToWriter,
    proto.jspb.test.Simple1.deserializeBinaryFromReader,
    false);
// This registers the extension field with the extended class, so that
// toObject() will function correctly.
proto.jspb.test.HasExtensions.extensions[104] = proto.jspb.test.IndirectExtension.repeatedSimpleList;


/**
 * A tuple of {field number, class constructor} for the extension
 * field named `simple`.
 * @type {!jspb.ExtensionFieldInfo<!proto.jspb.test.Simple1>}
 */
proto.jspb.test.IndirectExtension.simple = new jspb.ExtensionFieldInfo(
    101,
    {simple: 0},
    proto.jspb.test.Simple1,
     /** @type {?function((boolean|undefined),!jspb.Message=): !Object} */ (
         proto.jspb.test.Simple1.toObject),
    0);

proto.jspb.test.HasExtensions.extensionsBinary[101] = new jspb.ExtensionFieldBinaryInfo(
    proto.jspb.test.IndirectExtension.simple,
    jspb.BinaryReader.prototype.readMessage,
    jspb.BinaryWriter.prototype.writeMessage,
    proto.jspb.test.Simple1.serializeBinaryToWriter,
    proto.jspb.test.Simple1.deserializeBinaryFromReader,
    false);
// This registers the extension field with the extended class, so that
// toObject() will function correctly.
proto.jspb.test.HasExtensions.extensions[101] = proto.jspb.test.IndirectExtension.simple;


/**
 * A tuple of {field number, class constructor} for the extension
 * field named `str`.
 * @type {!jspb.ExtensionFieldInfo<string>}
 */
proto.jspb.test.IndirectExtension.str = new jspb.ExtensionFieldInfo(
    102,
    {str: 0},
    null,
     /** @type {?function((boolean|undefined),!jspb.Message=): !Object} */ (
         null),
    0);

proto.jspb.test.HasExtensions.extensionsBinary[102] = new jspb.ExtensionFieldBinaryInfo(
    proto.jspb.test.IndirectExtension.str,
    jspb.BinaryReader.prototype.readString,
    jspb.BinaryWriter.prototype.writeString,
    undefined,
    undefined,
    false);
// This registers the extension field with the extended class, so that
// toObject() will function correctly.
proto.jspb.test.HasExtensions.extensions[102] = proto.jspb.test.IndirectExtension.str;


/**
 * A tuple of {field number, class constructor} for the extension
 * field named `repeatedStrList`.
 * @type {!jspb.ExtensionFieldInfo<!Array<string>>}
 */
proto.jspb.test.IndirectExtension.repeatedStrList = new jspb.ExtensionFieldInfo(
    103,
    {repeatedStrList: 0},
    null,
     /** @type {?function((boolean|undefined),!jspb.Message=): !Object} */ (
         null),
    1);

proto.jspb.test.HasExtensions.extensionsBinary[103] = new jspb.ExtensionFieldBinaryInfo(
    proto.jspb.test.IndirectExtension.repeatedStrList,
    jspb.BinaryReader.prototype.readString,
    jspb.BinaryWriter.prototype.writeRepeatedString,
    undefined,
    undefined,
    false);
// This registers the extension field with the extended class, so that
// toObject() will function correctly.
proto.jspb.test.HasExtensions.extensions[103] = proto.jspb.test.IndirectExtension.repeatedStrList;


/**
 * A tuple of {field number, class constructor} for the extension
 * field named `repeatedSimpleList`.
 * @type {!jspb.ExtensionFieldInfo<!Array<!proto.jspb.test.Simple1>>}
 */
proto.jspb.test.IndirectExtension.repeatedSimpleList = new jspb.ExtensionFieldInfo(
    104,
    {repeatedSimpleList: 0},
    proto.jspb.test.Simple1,
     /** @type {?function((boolean|undefined),!jspb.Message=): !Object} */ (
         proto.jspb.test.Simple1.toObject),
    1);

proto.jspb.test.HasExtensions.extensionsBinary[104] = new jspb.ExtensionFieldBinaryInfo(
    proto.jspb.test.IndirectExtension.repeatedSimpleList,
    jspb.BinaryReader.prototype.readMessage,
    jspb.BinaryWriter.prototype.writeRepeatedMessage,
    proto.jspb.test.Simple1.serializeBinaryToWriter,
    proto.jspb.test.Simple1.deserializeBinaryFromReader,
    false);
// This registers the extension field with the extended class, so that
// toObject() will function correctly.
proto.jspb.test.HasExtensions.extensions[104] = proto.jspb.test.IndirectExtension.repeatedSimpleList;


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.jspb.test.DefaultValues = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.jspb.test.DefaultValues, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.jspb.test.DefaultValues.displayName = 'proto.jspb.test.DefaultValues';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.jspb.test.DefaultValues.prototype.toObject = function(opt_includeInstance) {
  return proto.jspb.test.DefaultValues.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.jspb.test.DefaultValues} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.jspb.test.DefaultValues.toObject = function(includeInstance, msg) {
  var f, obj = {
    stringField: jspb.Message.getFieldWithDefault(msg, 1, "default\x3c\x3e\x27\x22abc"),
    boolField: jspb.Message.getFieldWithDefault(msg, 2, true),
    intField: jspb.Message.getFieldWithDefault(msg, 3, 11),
    enumField: jspb.Message.getFieldWithDefault(msg, 4, 13),
    emptyField: jspb.Message.getFieldWithDefault(msg, 6, ""),
    bytesField: msg.getBytesField_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.jspb.test.DefaultValues}
 */
proto.jspb.test.DefaultValues.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.jspb.test.DefaultValues;
  return proto.jspb.test.DefaultValues.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.jspb.test.DefaultValues} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.jspb.test.DefaultValues}
 */
proto.jspb.test.DefaultValues.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setStringField(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setBoolField(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setIntField(value);
      break;
    case 4:
      var value = /** @type {!proto.jspb.test.DefaultValues.Enum} */ (reader.readEnum());
      msg.setEnumField(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setEmptyField(value);
      break;
    case 8:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setBytesField(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.jspb.test.DefaultValues.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.jspb.test.DefaultValues.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.jspb.test.DefaultValues} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.jspb.test.DefaultValues.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeBool(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = /** @type {!proto.jspb.test.DefaultValues.Enum} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeEnum(
      4,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeString(
      6,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeBytes(
      8,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.jspb.test.DefaultValues.Enum = {
  E1: 13,
  E2: 77
};

/**
 * optional string string_field = 1;
 * @return {string}
 */
proto.jspb.test.DefaultValues.prototype.getStringField = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, "default\x3c\x3e\x27\x22abc"));
};


/** @param {string} value */
proto.jspb.test.DefaultValues.prototype.setStringField = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.jspb.test.DefaultValues.prototype.clearStringField = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.jspb.test.DefaultValues.prototype.hasStringField = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bool bool_field = 2;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.jspb.test.DefaultValues.prototype.getBoolField = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 2, true));
};


/** @param {boolean} value */
proto.jspb.test.DefaultValues.prototype.setBoolField = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.jspb.test.DefaultValues.prototype.clearBoolField = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.jspb.test.DefaultValues.prototype.hasBoolField = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional int64 int_field = 3;
 * @return {number}
 */
proto.jspb.test.DefaultValues.prototype.getIntField = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 11));
};


/** @param {number} value */
proto.jspb.test.DefaultValues.prototype.setIntField = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.jspb.test.DefaultValues.prototype.clearIntField = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.jspb.test.DefaultValues.prototype.hasIntField = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional Enum enum_field = 4;
 * @return {!proto.jspb.test.DefaultValues.Enum}
 */
proto.jspb.test.DefaultValues.prototype.getEnumField = function() {
  return /** @type {!proto.jspb.test.DefaultValues.Enum} */ (jspb.Message.getFieldWithDefault(this, 4, 13));
};


/** @param {!proto.jspb.test.DefaultValues.Enum} value */
proto.jspb.test.DefaultValues.prototype.setEnumField = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.jspb.test.DefaultValues.prototype.clearEnumField = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.jspb.test.DefaultValues.prototype.hasEnumField = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional string empty_field = 6;
 * @return {string}
 */
proto.jspb.test.DefaultValues.prototype.getEmptyField = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.jspb.test.DefaultValues.prototype.setEmptyField = function(value) {
  jspb.Message.setField(this, 6, value);
};


proto.jspb.test.DefaultValues.prototype.clearEmptyField = function() {
  jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.jspb.test.DefaultValues.prototype.hasEmptyField = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional bytes bytes_field = 8;
 * @return {!(string|Uint8Array)}
 */
proto.jspb.test.DefaultValues.prototype.getBytesField = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 8, "bW9v"));
};


/**
 * optional bytes bytes_field = 8;
 * This is a type-conversion wrapper around `getBytesField()`
 * @return {string}
 */
proto.jspb.test.DefaultValues.prototype.getBytesField_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getBytesField()));
};


/**
 * optional bytes bytes_field = 8;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getBytesField()`
 * @return {!Uint8Array}
 */
proto.jspb.test.DefaultValues.prototype.getBytesField_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getBytesField()));
};


/** @param {!(string|Uint8Array)} value */
proto.jspb.test.DefaultValues.prototype.setBytesField = function(value) {
  jspb.Message.setField(this, 8, value);
};


proto.jspb.test.DefaultValues.prototype.clearBytesField = function() {
  jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.jspb.test.DefaultValues.prototype.hasBytesField = function() {
  return jspb.Message.getField(this, 8) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.jspb.test.FloatingPointFields = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.jspb.test.FloatingPointFields.repeatedFields_, null);
};
goog.inherits(proto.jspb.test.FloatingPointFields, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.jspb.test.FloatingPointFields.displayName = 'proto.jspb.test.FloatingPointFields';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.jspb.test.FloatingPointFields.repeatedFields_ = [3,7];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.jspb.test.FloatingPointFields.prototype.toObject = function(opt_includeInstance) {
  return proto.jspb.test.FloatingPointFields.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.jspb.test.FloatingPointFields} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.jspb.test.FloatingPointFields.toObject = function(includeInstance, msg) {
  var f, obj = {
    optionalFloatField: jspb.Message.getOptionalFloatingPointField(msg, 1),
    requiredFloatField: +jspb.Message.getField(msg, 2),
    repeatedFloatFieldList: jspb.Message.getRepeatedFloatingPointField(msg, 3),
    defaultFloatField: +jspb.Message.getFieldWithDefault(msg, 4, 2.0),
    optionalDoubleField: jspb.Message.getOptionalFloatingPointField(msg, 5),
    requiredDoubleField: +jspb.Message.getField(msg, 6),
    repeatedDoubleFieldList: jspb.Message.getRepeatedFloatingPointField(msg, 7),
    defaultDoubleField: +jspb.Message.getFieldWithDefault(msg, 8, 2.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.jspb.test.FloatingPointFields}
 */
proto.jspb.test.FloatingPointFields.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.jspb.test.FloatingPointFields;
  return proto.jspb.test.FloatingPointFields.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.jspb.test.FloatingPointFields} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.jspb.test.FloatingPointFields}
 */
proto.jspb.test.FloatingPointFields.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setOptionalFloatField(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setRequiredFloatField(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFloat());
      msg.addRepeatedFloatField(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setDefaultFloatField(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setOptionalDoubleField(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setRequiredDoubleField(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readDouble());
      msg.addRepeatedDoubleField(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setDefaultDoubleField(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.jspb.test.FloatingPointFields.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.jspb.test.FloatingPointFields.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.jspb.test.FloatingPointFields} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.jspb.test.FloatingPointFields.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeFloat(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeFloat(
      2,
      f
    );
  }
  f = message.getRepeatedFloatFieldList();
  if (f.length > 0) {
    writer.writeRepeatedFloat(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeFloat(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeDouble(
      5,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeDouble(
      6,
      f
    );
  }
  f = message.getRepeatedDoubleFieldList();
  if (f.length > 0) {
    writer.writeRepeatedDouble(
      7,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeDouble(
      8,
      f
    );
  }
};


/**
 * optional float optional_float_field = 1;
 * @return {number}
 */
proto.jspb.test.FloatingPointFields.prototype.getOptionalFloatField = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 1, 0.0));
};


/** @param {number} value */
proto.jspb.test.FloatingPointFields.prototype.setOptionalFloatField = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.jspb.test.FloatingPointFields.prototype.clearOptionalFloatField = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.jspb.test.FloatingPointFields.prototype.hasOptionalFloatField = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required float required_float_field = 2;
 * @return {number}
 */
proto.jspb.test.FloatingPointFields.prototype.getRequiredFloatField = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 2, 0.0));
};


/** @param {number} value */
proto.jspb.test.FloatingPointFields.prototype.setRequiredFloatField = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.jspb.test.FloatingPointFields.prototype.clearRequiredFloatField = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.jspb.test.FloatingPointFields.prototype.hasRequiredFloatField = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated float repeated_float_field = 3;
 * @return {!Array<number>}
 */
proto.jspb.test.FloatingPointFields.prototype.getRepeatedFloatFieldList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 3));
};


/** @param {!Array<number>} value */
proto.jspb.test.FloatingPointFields.prototype.setRepeatedFloatFieldList = function(value) {
  jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.jspb.test.FloatingPointFields.prototype.addRepeatedFloatField = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


proto.jspb.test.FloatingPointFields.prototype.clearRepeatedFloatFieldList = function() {
  this.setRepeatedFloatFieldList([]);
};


/**
 * optional float default_float_field = 4;
 * @return {number}
 */
proto.jspb.test.FloatingPointFields.prototype.getDefaultFloatField = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 4, 2.0));
};


/** @param {number} value */
proto.jspb.test.FloatingPointFields.prototype.setDefaultFloatField = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.jspb.test.FloatingPointFields.prototype.clearDefaultFloatField = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.jspb.test.FloatingPointFields.prototype.hasDefaultFloatField = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional double optional_double_field = 5;
 * @return {number}
 */
proto.jspb.test.FloatingPointFields.prototype.getOptionalDoubleField = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 5, 0.0));
};


/** @param {number} value */
proto.jspb.test.FloatingPointFields.prototype.setOptionalDoubleField = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.jspb.test.FloatingPointFields.prototype.clearOptionalDoubleField = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.jspb.test.FloatingPointFields.prototype.hasOptionalDoubleField = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * required double required_double_field = 6;
 * @return {number}
 */
proto.jspb.test.FloatingPointFields.prototype.getRequiredDoubleField = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 6, 0.0));
};


/** @param {number} value */
proto.jspb.test.FloatingPointFields.prototype.setRequiredDoubleField = function(value) {
  jspb.Message.setField(this, 6, value);
};


proto.jspb.test.FloatingPointFields.prototype.clearRequiredDoubleField = function() {
  jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.jspb.test.FloatingPointFields.prototype.hasRequiredDoubleField = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * repeated double repeated_double_field = 7;
 * @return {!Array<number>}
 */
proto.jspb.test.FloatingPointFields.prototype.getRepeatedDoubleFieldList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 7));
};


/** @param {!Array<number>} value */
proto.jspb.test.FloatingPointFields.prototype.setRepeatedDoubleFieldList = function(value) {
  jspb.Message.setField(this, 7, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.jspb.test.FloatingPointFields.prototype.addRepeatedDoubleField = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 7, value, opt_index);
};


proto.jspb.test.FloatingPointFields.prototype.clearRepeatedDoubleFieldList = function() {
  this.setRepeatedDoubleFieldList([]);
};


/**
 * optional double default_double_field = 8;
 * @return {number}
 */
proto.jspb.test.FloatingPointFields.prototype.getDefaultDoubleField = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 8, 2.0));
};


/** @param {number} value */
proto.jspb.test.FloatingPointFields.prototype.setDefaultDoubleField = function(value) {
  jspb.Message.setField(this, 8, value);
};


proto.jspb.test.FloatingPointFields.prototype.clearDefaultDoubleField = function() {
  jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.jspb.test.FloatingPointFields.prototype.hasDefaultDoubleField = function() {
  return jspb.Message.getField(this, 8) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.jspb.test.TestClone = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, 8, proto.jspb.test.TestClone.repeatedFields_, null);
};
goog.inherits(proto.jspb.test.TestClone, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.jspb.test.TestClone.displayName = 'proto.jspb.test.TestClone';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.jspb.test.TestClone.repeatedFields_ = [5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.jspb.test.TestClone.prototype.toObject = function(opt_includeInstance) {
  return proto.jspb.test.TestClone.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.jspb.test.TestClone} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.jspb.test.TestClone.toObject = function(includeInstance, msg) {
  var f, obj = {
    str: jspb.Message.getField(msg, 1),
    simple1: (f = msg.getSimple1()) && proto.jspb.test.Simple1.toObject(includeInstance, f),
    simple2List: jspb.Message.toObjectList(msg.getSimple2List(),
    proto.jspb.test.Simple1.toObject, includeInstance),
    bytesField: msg.getBytesField_asB64(),
    unused: jspb.Message.getField(msg, 7)
  };

  jspb.Message.toObjectExtension(/** @type {!jspb.Message} */ (msg), obj,
      proto.jspb.test.TestClone.extensions, proto.jspb.test.TestClone.prototype.getExtension,
      includeInstance);
  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.jspb.test.TestClone}
 */
proto.jspb.test.TestClone.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.jspb.test.TestClone;
  return proto.jspb.test.TestClone.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.jspb.test.TestClone} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.jspb.test.TestClone}
 */
proto.jspb.test.TestClone.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setStr(value);
      break;
    case 3:
      var value = new proto.jspb.test.Simple1;
      reader.readMessage(value,proto.jspb.test.Simple1.deserializeBinaryFromReader);
      msg.setSimple1(value);
      break;
    case 5:
      var value = new proto.jspb.test.Simple1;
      reader.readMessage(value,proto.jspb.test.Simple1.deserializeBinaryFromReader);
      msg.addSimple2(value);
      break;
    case 6:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setBytesField(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setUnused(value);
      break;
    default:
      jspb.Message.readBinaryExtension(msg, reader, proto.jspb.test.TestClone.extensionsBinary,
        proto.jspb.test.TestClone.prototype.getExtension,
        proto.jspb.test.TestClone.prototype.setExtension);
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.jspb.test.TestClone.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.jspb.test.TestClone.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.jspb.test.TestClone} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.jspb.test.TestClone.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSimple1();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.jspb.test.Simple1.serializeBinaryToWriter
    );
  }
  f = message.getSimple2List();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.jspb.test.Simple1.serializeBinaryToWriter
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeBytes(
      6,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeString(
      7,
      f
    );
  }
  jspb.Message.serializeBinaryExtensions(message, writer,
    proto.jspb.test.TestClone.extensionsBinary, proto.jspb.test.TestClone.prototype.getExtension);
};


/**
 * optional string str = 1;
 * @return {string}
 */
proto.jspb.test.TestClone.prototype.getStr = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.jspb.test.TestClone.prototype.setStr = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.jspb.test.TestClone.prototype.clearStr = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.jspb.test.TestClone.prototype.hasStr = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Simple1 simple1 = 3;
 * @return {?proto.jspb.test.Simple1}
 */
proto.jspb.test.TestClone.prototype.getSimple1 = function() {
  return /** @type{?proto.jspb.test.Simple1} */ (
    jspb.Message.getWrapperField(this, proto.jspb.test.Simple1, 3));
};


/** @param {?proto.jspb.test.Simple1|undefined} value */
proto.jspb.test.TestClone.prototype.setSimple1 = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.jspb.test.TestClone.prototype.clearSimple1 = function() {
  this.setSimple1(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.jspb.test.TestClone.prototype.hasSimple1 = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * repeated Simple1 simple2 = 5;
 * @return {!Array<!proto.jspb.test.Simple1>}
 */
proto.jspb.test.TestClone.prototype.getSimple2List = function() {
  return /** @type{!Array<!proto.jspb.test.Simple1>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.jspb.test.Simple1, 5));
};


/** @param {!Array<!proto.jspb.test.Simple1>} value */
proto.jspb.test.TestClone.prototype.setSimple2List = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.jspb.test.Simple1=} opt_value
 * @param {number=} opt_index
 * @return {!proto.jspb.test.Simple1}
 */
proto.jspb.test.TestClone.prototype.addSimple2 = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.jspb.test.Simple1, opt_index);
};


proto.jspb.test.TestClone.prototype.clearSimple2List = function() {
  this.setSimple2List([]);
};


/**
 * optional bytes bytes_field = 6;
 * @return {!(string|Uint8Array)}
 */
proto.jspb.test.TestClone.prototype.getBytesField = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * optional bytes bytes_field = 6;
 * This is a type-conversion wrapper around `getBytesField()`
 * @return {string}
 */
proto.jspb.test.TestClone.prototype.getBytesField_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getBytesField()));
};


/**
 * optional bytes bytes_field = 6;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getBytesField()`
 * @return {!Uint8Array}
 */
proto.jspb.test.TestClone.prototype.getBytesField_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getBytesField()));
};


/** @param {!(string|Uint8Array)} value */
proto.jspb.test.TestClone.prototype.setBytesField = function(value) {
  jspb.Message.setField(this, 6, value);
};


proto.jspb.test.TestClone.prototype.clearBytesField = function() {
  jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.jspb.test.TestClone.prototype.hasBytesField = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional string unused = 7;
 * @return {string}
 */
proto.jspb.test.TestClone.prototype.getUnused = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/** @param {string} value */
proto.jspb.test.TestClone.prototype.setUnused = function(value) {
  jspb.Message.setField(this, 7, value);
};


proto.jspb.test.TestClone.prototype.clearUnused = function() {
  jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.jspb.test.TestClone.prototype.hasUnused = function() {
  return jspb.Message.getField(this, 7) != null;
};



/**
 * The extensions registered with this message class. This is a map of
 * extension field number to fieldInfo object.
 *
 * For example:
 *     { 123: {fieldIndex: 123, fieldName: {my_field_name: 0}, ctor: proto.example.MyMessage} }
 *
 * fieldName contains the JsCompiler renamed field name property so that it
 * works in OPTIMIZED mode.
 *
 * @type {!Object<number, jspb.ExtensionFieldInfo>}
 */
proto.jspb.test.TestClone.extensions = {};


/**
 * The extensions registered with this message class. This is a map of
 * extension field number to fieldInfo object.
 *
 * For example:
 *     { 123: {fieldIndex: 123, fieldName: {my_field_name: 0}, ctor: proto.example.MyMessage} }
 *
 * fieldName contains the JsCompiler renamed field name property so that it
 * works in OPTIMIZED mode.
 *
 * @type {!Object<number, jspb.ExtensionFieldBinaryInfo>}
 */
proto.jspb.test.TestClone.extensionsBinary = {};


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.jspb.test.CloneExtension = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.jspb.test.CloneExtension, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.jspb.test.CloneExtension.displayName = 'proto.jspb.test.CloneExtension';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.jspb.test.CloneExtension.prototype.toObject = function(opt_includeInstance) {
  return proto.jspb.test.CloneExtension.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.jspb.test.CloneExtension} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.jspb.test.CloneExtension.toObject = function(includeInstance, msg) {
  var f, obj = {
    ext: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.jspb.test.CloneExtension}
 */
proto.jspb.test.CloneExtension.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.jspb.test.CloneExtension;
  return proto.jspb.test.CloneExtension.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.jspb.test.CloneExtension} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.jspb.test.CloneExtension}
 */
proto.jspb.test.CloneExtension.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setExt(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.jspb.test.CloneExtension.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.jspb.test.CloneExtension.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.jspb.test.CloneExtension} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.jspb.test.CloneExtension.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
};



/**
 * A tuple of {field number, class constructor} for the extension
 * field named `extField`.
 * @type {!jspb.ExtensionFieldInfo<!proto.jspb.test.CloneExtension>}
 */
proto.jspb.test.CloneExtension.extField = new jspb.ExtensionFieldInfo(
    100,
    {extField: 0},
    proto.jspb.test.CloneExtension,
     /** @type {?function((boolean|undefined),!jspb.Message=): !Object} */ (
         proto.jspb.test.CloneExtension.toObject),
    0);

proto.jspb.test.TestClone.extensionsBinary[100] = new jspb.ExtensionFieldBinaryInfo(
    proto.jspb.test.CloneExtension.extField,
    jspb.BinaryReader.prototype.readMessage,
    jspb.BinaryWriter.prototype.writeMessage,
    proto.jspb.test.CloneExtension.serializeBinaryToWriter,
    proto.jspb.test.CloneExtension.deserializeBinaryFromReader,
    false);
// This registers the extension field with the extended class, so that
// toObject() will function correctly.
proto.jspb.test.TestClone.extensions[100] = proto.jspb.test.CloneExtension.extField;

/**
 * optional string ext = 2;
 * @return {string}
 */
proto.jspb.test.CloneExtension.prototype.getExt = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.jspb.test.CloneExtension.prototype.setExt = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.jspb.test.CloneExtension.prototype.clearExt = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.jspb.test.CloneExtension.prototype.hasExt = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * A tuple of {field number, class constructor} for the extension
 * field named `extField`.
 * @type {!jspb.ExtensionFieldInfo<!proto.jspb.test.CloneExtension>}
 */
proto.jspb.test.CloneExtension.extField = new jspb.ExtensionFieldInfo(
    100,
    {extField: 0},
    proto.jspb.test.CloneExtension,
     /** @type {?function((boolean|undefined),!jspb.Message=): !Object} */ (
         proto.jspb.test.CloneExtension.toObject),
    0);

proto.jspb.test.TestClone.extensionsBinary[100] = new jspb.ExtensionFieldBinaryInfo(
    proto.jspb.test.CloneExtension.extField,
    jspb.BinaryReader.prototype.readMessage,
    jspb.BinaryWriter.prototype.writeMessage,
    proto.jspb.test.CloneExtension.serializeBinaryToWriter,
    proto.jspb.test.CloneExtension.deserializeBinaryFromReader,
    false);
// This registers the extension field with the extended class, so that
// toObject() will function correctly.
proto.jspb.test.TestClone.extensions[100] = proto.jspb.test.CloneExtension.extField;


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.jspb.test.TestGroup = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.jspb.test.TestGroup.repeatedFields_, null);
};
goog.inherits(proto.jspb.test.TestGroup, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.jspb.test.TestGroup.displayName = 'proto.jspb.test.TestGroup';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.jspb.test.TestGroup.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.jspb.test.TestGroup.prototype.toObject = function(opt_includeInstance) {
  return proto.jspb.test.TestGroup.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.jspb.test.TestGroup} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.jspb.test.TestGroup.toObject = function(includeInstance, msg) {
  var f, obj = {
    repeatedGroupList: jspb.Message.toObjectList(msg.getRepeatedGroupList(),
    proto.jspb.test.TestGroup.RepeatedGroup.toObject, includeInstance),
    requiredGroup: (f = msg.getRequiredGroup()) && proto.jspb.test.TestGroup.RequiredGroup.toObject(includeInstance, f),
    optionalGroup: (f = msg.getOptionalGroup()) && proto.jspb.test.TestGroup.OptionalGroup.toObject(includeInstance, f),
    id: jspb.Message.getField(msg, 4),
    requiredSimple: (f = msg.getRequiredSimple()) && proto.jspb.test.Simple2.toObject(includeInstance, f),
    optionalSimple: (f = msg.getOptionalSimple()) && proto.jspb.test.Simple2.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.jspb.test.TestGroup}
 */
proto.jspb.test.TestGroup.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.jspb.test.TestGroup;
  return proto.jspb.test.TestGroup.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.jspb.test.TestGroup} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.jspb.test.TestGroup}
 */
proto.jspb.test.TestGroup.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.jspb.test.TestGroup.RepeatedGroup;
      reader.readGroup(1, value,proto.jspb.test.TestGroup.RepeatedGroup.deserializeBinaryFromReader);
      msg.addRepeatedGroup(value);
      break;
    case 2:
      var value = new proto.jspb.test.TestGroup.RequiredGroup;
      reader.readGroup(2, value,proto.jspb.test.TestGroup.RequiredGroup.deserializeBinaryFromReader);
      msg.setRequiredGroup(value);
      break;
    case 3:
      var value = new proto.jspb.test.TestGroup.OptionalGroup;
      reader.readGroup(3, value,proto.jspb.test.TestGroup.OptionalGroup.deserializeBinaryFromReader);
      msg.setOptionalGroup(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 5:
      var value = new proto.jspb.test.Simple2;
      reader.readMessage(value,proto.jspb.test.Simple2.deserializeBinaryFromReader);
      msg.setRequiredSimple(value);
      break;
    case 6:
      var value = new proto.jspb.test.Simple2;
      reader.readMessage(value,proto.jspb.test.Simple2.deserializeBinaryFromReader);
      msg.setOptionalSimple(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.jspb.test.TestGroup.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.jspb.test.TestGroup.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.jspb.test.TestGroup} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.jspb.test.TestGroup.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRepeatedGroupList();
  if (f.length > 0) {
    writer.writeRepeatedGroup(
      1,
      f,
      proto.jspb.test.TestGroup.RepeatedGroup.serializeBinaryToWriter
    );
  }
  f = message.getRequiredGroup();
  if (f != null) {
    writer.writeGroup(
      2,
      f,
      proto.jspb.test.TestGroup.RequiredGroup.serializeBinaryToWriter
    );
  }
  f = message.getOptionalGroup();
  if (f != null) {
    writer.writeGroup(
      3,
      f,
      proto.jspb.test.TestGroup.OptionalGroup.serializeBinaryToWriter
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getRequiredSimple();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.jspb.test.Simple2.serializeBinaryToWriter
    );
  }
  f = message.getOptionalSimple();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.jspb.test.Simple2.serializeBinaryToWriter
    );
  }
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.jspb.test.TestGroup.RepeatedGroup = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.jspb.test.TestGroup.RepeatedGroup.repeatedFields_, null);
};
goog.inherits(proto.jspb.test.TestGroup.RepeatedGroup, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.jspb.test.TestGroup.RepeatedGroup.displayName = 'proto.jspb.test.TestGroup.RepeatedGroup';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.jspb.test.TestGroup.RepeatedGroup.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.jspb.test.TestGroup.RepeatedGroup.prototype.toObject = function(opt_includeInstance) {
  return proto.jspb.test.TestGroup.RepeatedGroup.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.jspb.test.TestGroup.RepeatedGroup} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.jspb.test.TestGroup.RepeatedGroup.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getField(msg, 0),
    someBoolList: jspb.Message.getRepeatedField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.jspb.test.TestGroup.RepeatedGroup}
 */
proto.jspb.test.TestGroup.RepeatedGroup.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.jspb.test.TestGroup.RepeatedGroup;
  return proto.jspb.test.TestGroup.RepeatedGroup.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.jspb.test.TestGroup.RepeatedGroup} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.jspb.test.TestGroup.RepeatedGroup}
 */
proto.jspb.test.TestGroup.RepeatedGroup.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.addSomeBool(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.jspb.test.TestGroup.RepeatedGroup.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.jspb.test.TestGroup.RepeatedGroup.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.jspb.test.TestGroup.RepeatedGroup} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.jspb.test.TestGroup.RepeatedGroup.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 0));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSomeBoolList();
  if (f.length > 0) {
    writer.writeRepeatedBool(
      2,
      f
    );
  }
};


/**
 * required string id = 1;
 * @return {string}
 */
proto.jspb.test.TestGroup.RepeatedGroup.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 0, ""));
};


/** @param {string} value */
proto.jspb.test.TestGroup.RepeatedGroup.prototype.setId = function(value) {
  jspb.Message.setField(this, 0, value);
};


proto.jspb.test.TestGroup.RepeatedGroup.prototype.clearId = function() {
  jspb.Message.setField(this, 0, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.jspb.test.TestGroup.RepeatedGroup.prototype.hasId = function() {
  return jspb.Message.getField(this, 0) != null;
};


/**
 * repeated bool some_bool = 2;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {!Array<boolean>}
 */
proto.jspb.test.TestGroup.RepeatedGroup.prototype.getSomeBoolList = function() {
  return /** @type {!Array<boolean>} */ (jspb.Message.getRepeatedField(this, 1));
};


/** @param {!Array<boolean>} value */
proto.jspb.test.TestGroup.RepeatedGroup.prototype.setSomeBoolList = function(value) {
  jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {!boolean} value
 * @param {number=} opt_index
 */
proto.jspb.test.TestGroup.RepeatedGroup.prototype.addSomeBool = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


proto.jspb.test.TestGroup.RepeatedGroup.prototype.clearSomeBoolList = function() {
  this.setSomeBoolList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.jspb.test.TestGroup.RequiredGroup = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.jspb.test.TestGroup.RequiredGroup, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.jspb.test.TestGroup.RequiredGroup.displayName = 'proto.jspb.test.TestGroup.RequiredGroup';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.jspb.test.TestGroup.RequiredGroup.prototype.toObject = function(opt_includeInstance) {
  return proto.jspb.test.TestGroup.RequiredGroup.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.jspb.test.TestGroup.RequiredGroup} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.jspb.test.TestGroup.RequiredGroup.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getField(msg, -1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.jspb.test.TestGroup.RequiredGroup}
 */
proto.jspb.test.TestGroup.RequiredGroup.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.jspb.test.TestGroup.RequiredGroup;
  return proto.jspb.test.TestGroup.RequiredGroup.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.jspb.test.TestGroup.RequiredGroup} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.jspb.test.TestGroup.RequiredGroup}
 */
proto.jspb.test.TestGroup.RequiredGroup.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.jspb.test.TestGroup.RequiredGroup.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.jspb.test.TestGroup.RequiredGroup.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.jspb.test.TestGroup.RequiredGroup} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.jspb.test.TestGroup.RequiredGroup.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, -1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * required string id = 1;
 * @return {string}
 */
proto.jspb.test.TestGroup.RequiredGroup.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, -1, ""));
};


/** @param {string} value */
proto.jspb.test.TestGroup.RequiredGroup.prototype.setId = function(value) {
  jspb.Message.setField(this, -1, value);
};


proto.jspb.test.TestGroup.RequiredGroup.prototype.clearId = function() {
  jspb.Message.setField(this, -1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.jspb.test.TestGroup.RequiredGroup.prototype.hasId = function() {
  return jspb.Message.getField(this, -1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.jspb.test.TestGroup.OptionalGroup = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.jspb.test.TestGroup.OptionalGroup, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.jspb.test.TestGroup.OptionalGroup.displayName = 'proto.jspb.test.TestGroup.OptionalGroup';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.jspb.test.TestGroup.OptionalGroup.prototype.toObject = function(opt_includeInstance) {
  return proto.jspb.test.TestGroup.OptionalGroup.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.jspb.test.TestGroup.OptionalGroup} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.jspb.test.TestGroup.OptionalGroup.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getField(msg, -2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.jspb.test.TestGroup.OptionalGroup}
 */
proto.jspb.test.TestGroup.OptionalGroup.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.jspb.test.TestGroup.OptionalGroup;
  return proto.jspb.test.TestGroup.OptionalGroup.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.jspb.test.TestGroup.OptionalGroup} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.jspb.test.TestGroup.OptionalGroup}
 */
proto.jspb.test.TestGroup.OptionalGroup.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.jspb.test.TestGroup.OptionalGroup.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.jspb.test.TestGroup.OptionalGroup.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.jspb.test.TestGroup.OptionalGroup} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.jspb.test.TestGroup.OptionalGroup.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, -2));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * required string id = 1;
 * @return {string}
 */
proto.jspb.test.TestGroup.OptionalGroup.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, -2, ""));
};


/** @param {string} value */
proto.jspb.test.TestGroup.OptionalGroup.prototype.setId = function(value) {
  jspb.Message.setField(this, -2, value);
};


proto.jspb.test.TestGroup.OptionalGroup.prototype.clearId = function() {
  jspb.Message.setField(this, -2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.jspb.test.TestGroup.OptionalGroup.prototype.hasId = function() {
  return jspb.Message.getField(this, -2) != null;
};


/**
 * repeated group RepeatedGroup = 1;
 * @return {!Array<!proto.jspb.test.TestGroup.RepeatedGroup>}
 */
proto.jspb.test.TestGroup.prototype.getRepeatedGroupList = function() {
  return /** @type{!Array<!proto.jspb.test.TestGroup.RepeatedGroup>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.jspb.test.TestGroup.RepeatedGroup, 1));
};


/** @param {!Array<!proto.jspb.test.TestGroup.RepeatedGroup>} value */
proto.jspb.test.TestGroup.prototype.setRepeatedGroupList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.jspb.test.TestGroup.RepeatedGroup=} opt_value
 * @param {number=} opt_index
 * @return {!proto.jspb.test.TestGroup.RepeatedGroup}
 */
proto.jspb.test.TestGroup.prototype.addRepeatedGroup = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.jspb.test.TestGroup.RepeatedGroup, opt_index);
};


proto.jspb.test.TestGroup.prototype.clearRepeatedGroupList = function() {
  this.setRepeatedGroupList([]);
};


/**
 * required group RequiredGroup = 2;
 * @return {!proto.jspb.test.TestGroup.RequiredGroup}
 */
proto.jspb.test.TestGroup.prototype.getRequiredGroup = function() {
  return /** @type{!proto.jspb.test.TestGroup.RequiredGroup} */ (
    jspb.Message.getWrapperField(this, proto.jspb.test.TestGroup.RequiredGroup, 2, 1));
};


/** @param {!proto.jspb.test.TestGroup.RequiredGroup} value */
proto.jspb.test.TestGroup.prototype.setRequiredGroup = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.jspb.test.TestGroup.prototype.clearRequiredGroup = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.jspb.test.TestGroup.prototype.hasRequiredGroup = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional group OptionalGroup = 3;
 * @return {?proto.jspb.test.TestGroup.OptionalGroup}
 */
proto.jspb.test.TestGroup.prototype.getOptionalGroup = function() {
  return /** @type{?proto.jspb.test.TestGroup.OptionalGroup} */ (
    jspb.Message.getWrapperField(this, proto.jspb.test.TestGroup.OptionalGroup, 3));
};


/** @param {?proto.jspb.test.TestGroup.OptionalGroup|undefined} value */
proto.jspb.test.TestGroup.prototype.setOptionalGroup = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.jspb.test.TestGroup.prototype.clearOptionalGroup = function() {
  this.setOptionalGroup(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.jspb.test.TestGroup.prototype.hasOptionalGroup = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string id = 4;
 * @return {string}
 */
proto.jspb.test.TestGroup.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.jspb.test.TestGroup.prototype.setId = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.jspb.test.TestGroup.prototype.clearId = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.jspb.test.TestGroup.prototype.hasId = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * required Simple2 required_simple = 5;
 * @return {!proto.jspb.test.Simple2}
 */
proto.jspb.test.TestGroup.prototype.getRequiredSimple = function() {
  return /** @type{!proto.jspb.test.Simple2} */ (
    jspb.Message.getWrapperField(this, proto.jspb.test.Simple2, 5, 1));
};


/** @param {!proto.jspb.test.Simple2} value */
proto.jspb.test.TestGroup.prototype.setRequiredSimple = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};


proto.jspb.test.TestGroup.prototype.clearRequiredSimple = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.jspb.test.TestGroup.prototype.hasRequiredSimple = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional Simple2 optional_simple = 6;
 * @return {?proto.jspb.test.Simple2}
 */
proto.jspb.test.TestGroup.prototype.getOptionalSimple = function() {
  return /** @type{?proto.jspb.test.Simple2} */ (
    jspb.Message.getWrapperField(this, proto.jspb.test.Simple2, 6));
};


/** @param {?proto.jspb.test.Simple2|undefined} value */
proto.jspb.test.TestGroup.prototype.setOptionalSimple = function(value) {
  jspb.Message.setWrapperField(this, 6, value);
};


proto.jspb.test.TestGroup.prototype.clearOptionalSimple = function() {
  this.setOptionalSimple(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.jspb.test.TestGroup.prototype.hasOptionalSimple = function() {
  return jspb.Message.getField(this, 6) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.jspb.test.TestGroup1 = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.jspb.test.TestGroup1, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.jspb.test.TestGroup1.displayName = 'proto.jspb.test.TestGroup1';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.jspb.test.TestGroup1.prototype.toObject = function(opt_includeInstance) {
  return proto.jspb.test.TestGroup1.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.jspb.test.TestGroup1} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.jspb.test.TestGroup1.toObject = function(includeInstance, msg) {
  var f, obj = {
    group: (f = msg.getGroup()) && proto.jspb.test.TestGroup.RepeatedGroup.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.jspb.test.TestGroup1}
 */
proto.jspb.test.TestGroup1.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.jspb.test.TestGroup1;
  return proto.jspb.test.TestGroup1.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.jspb.test.TestGroup1} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.jspb.test.TestGroup1}
 */
proto.jspb.test.TestGroup1.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.jspb.test.TestGroup.RepeatedGroup;
      reader.readMessage(value,proto.jspb.test.TestGroup.RepeatedGroup.deserializeBinaryFromReader);
      msg.setGroup(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.jspb.test.TestGroup1.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.jspb.test.TestGroup1.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.jspb.test.TestGroup1} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.jspb.test.TestGroup1.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGroup();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.jspb.test.TestGroup.RepeatedGroup.serializeBinaryToWriter
    );
  }
};


/**
 * optional TestGroup.RepeatedGroup group = 1;
 * @return {?proto.jspb.test.TestGroup.RepeatedGroup}
 */
proto.jspb.test.TestGroup1.prototype.getGroup = function() {
  return /** @type{?proto.jspb.test.TestGroup.RepeatedGroup} */ (
    jspb.Message.getWrapperField(this, proto.jspb.test.TestGroup.RepeatedGroup, 1));
};


/** @param {?proto.jspb.test.TestGroup.RepeatedGroup|undefined} value */
proto.jspb.test.TestGroup1.prototype.setGroup = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.jspb.test.TestGroup1.prototype.clearGroup = function() {
  this.setGroup(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.jspb.test.TestGroup1.prototype.hasGroup = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.jspb.test.TestReservedNames = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, 2, null, null);
};
goog.inherits(proto.jspb.test.TestReservedNames, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.jspb.test.TestReservedNames.displayName = 'proto.jspb.test.TestReservedNames';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.jspb.test.TestReservedNames.prototype.toObject = function(opt_includeInstance) {
  return proto.jspb.test.TestReservedNames.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.jspb.test.TestReservedNames} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.jspb.test.TestReservedNames.toObject = function(includeInstance, msg) {
  var f, obj = {
    extension: jspb.Message.getField(msg, 1)
  };

  jspb.Message.toObjectExtension(/** @type {!jspb.Message} */ (msg), obj,
      proto.jspb.test.TestReservedNames.extensions, proto.jspb.test.TestReservedNames.prototype.getExtension,
      includeInstance);
  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.jspb.test.TestReservedNames}
 */
proto.jspb.test.TestReservedNames.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.jspb.test.TestReservedNames;
  return proto.jspb.test.TestReservedNames.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.jspb.test.TestReservedNames} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.jspb.test.TestReservedNames}
 */
proto.jspb.test.TestReservedNames.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setExtension$(value);
      break;
    default:
      jspb.Message.readBinaryExtension(msg, reader, proto.jspb.test.TestReservedNames.extensionsBinary,
        proto.jspb.test.TestReservedNames.prototype.getExtension,
        proto.jspb.test.TestReservedNames.prototype.setExtension);
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.jspb.test.TestReservedNames.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.jspb.test.TestReservedNames.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.jspb.test.TestReservedNames} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.jspb.test.TestReservedNames.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  jspb.Message.serializeBinaryExtensions(message, writer,
    proto.jspb.test.TestReservedNames.extensionsBinary, proto.jspb.test.TestReservedNames.prototype.getExtension);
};


/**
 * optional int32 extension = 1;
 * @return {number}
 */
proto.jspb.test.TestReservedNames.prototype.getExtension$ = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.jspb.test.TestReservedNames.prototype.setExtension$ = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.jspb.test.TestReservedNames.prototype.clearExtension$ = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.jspb.test.TestReservedNames.prototype.hasExtension$ = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * The extensions registered with this message class. This is a map of
 * extension field number to fieldInfo object.
 *
 * For example:
 *     { 123: {fieldIndex: 123, fieldName: {my_field_name: 0}, ctor: proto.example.MyMessage} }
 *
 * fieldName contains the JsCompiler renamed field name property so that it
 * works in OPTIMIZED mode.
 *
 * @type {!Object<number, jspb.ExtensionFieldInfo>}
 */
proto.jspb.test.TestReservedNames.extensions = {};


/**
 * The extensions registered with this message class. This is a map of
 * extension field number to fieldInfo object.
 *
 * For example:
 *     { 123: {fieldIndex: 123, fieldName: {my_field_name: 0}, ctor: proto.example.MyMessage} }
 *
 * fieldName contains the JsCompiler renamed field name property so that it
 * works in OPTIMIZED mode.
 *
 * @type {!Object<number, jspb.ExtensionFieldBinaryInfo>}
 */
proto.jspb.test.TestReservedNames.extensionsBinary = {};


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.jspb.test.TestReservedNamesExtension = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.jspb.test.TestReservedNamesExtension, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.jspb.test.TestReservedNamesExtension.displayName = 'proto.jspb.test.TestReservedNamesExtension';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.jspb.test.TestReservedNamesExtension.prototype.toObject = function(opt_includeInstance) {
  return proto.jspb.test.TestReservedNamesExtension.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.jspb.test.TestReservedNamesExtension} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.jspb.test.TestReservedNamesExtension.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.jspb.test.TestReservedNamesExtension}
 */
proto.jspb.test.TestReservedNamesExtension.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.jspb.test.TestReservedNamesExtension;
  return proto.jspb.test.TestReservedNamesExtension.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.jspb.test.TestReservedNamesExtension} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.jspb.test.TestReservedNamesExtension}
 */
proto.jspb.test.TestReservedNamesExtension.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.jspb.test.TestReservedNamesExtension.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.jspb.test.TestReservedNamesExtension.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.jspb.test.TestReservedNamesExtension} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.jspb.test.TestReservedNamesExtension.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * A tuple of {field number, class constructor} for the extension
 * field named `foo`.
 * @type {!jspb.ExtensionFieldInfo<number>}
 */
proto.jspb.test.TestReservedNamesExtension.foo = new jspb.ExtensionFieldInfo(
    10,
    {foo: 0},
    null,
     /** @type {?function((boolean|undefined),!jspb.Message=): !Object} */ (
         null),
    0);

proto.jspb.test.TestReservedNames.extensionsBinary[10] = new jspb.ExtensionFieldBinaryInfo(
    proto.jspb.test.TestReservedNamesExtension.foo,
    jspb.BinaryReader.prototype.readInt32,
    jspb.BinaryWriter.prototype.writeInt32,
    undefined,
    undefined,
    false);
// This registers the extension field with the extended class, so that
// toObject() will function correctly.
proto.jspb.test.TestReservedNames.extensions[10] = proto.jspb.test.TestReservedNamesExtension.foo;


/**
 * A tuple of {field number, class constructor} for the extension
 * field named `foo`.
 * @type {!jspb.ExtensionFieldInfo<number>}
 */
proto.jspb.test.TestReservedNamesExtension.foo = new jspb.ExtensionFieldInfo(
    10,
    {foo: 0},
    null,
     /** @type {?function((boolean|undefined),!jspb.Message=): !Object} */ (
         null),
    0);

proto.jspb.test.TestReservedNames.extensionsBinary[10] = new jspb.ExtensionFieldBinaryInfo(
    proto.jspb.test.TestReservedNamesExtension.foo,
    jspb.BinaryReader.prototype.readInt32,
    jspb.BinaryWriter.prototype.writeInt32,
    undefined,
    undefined,
    false);
// This registers the extension field with the extended class, so that
// toObject() will function correctly.
proto.jspb.test.TestReservedNames.extensions[10] = proto.jspb.test.TestReservedNamesExtension.foo;


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.jspb.test.TestMessageWithOneof = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.jspb.test.TestMessageWithOneof.repeatedFields_, proto.jspb.test.TestMessageWithOneof.oneofGroups_);
};
goog.inherits(proto.jspb.test.TestMessageWithOneof, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.jspb.test.TestMessageWithOneof.displayName = 'proto.jspb.test.TestMessageWithOneof';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.jspb.test.TestMessageWithOneof.repeatedFields_ = [9];

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.jspb.test.TestMessageWithOneof.oneofGroups_ = [[3,5],[6,7],[10,11],[12,13]];

/**
 * @enum {number}
 */
proto.jspb.test.TestMessageWithOneof.PartialOneofCase = {
  PARTIAL_ONEOF_NOT_SET: 0,
  PONE: 3,
  PTHREE: 5
};

/**
 * @return {proto.jspb.test.TestMessageWithOneof.PartialOneofCase}
 */
proto.jspb.test.TestMessageWithOneof.prototype.getPartialOneofCase = function() {
  return /** @type {proto.jspb.test.TestMessageWithOneof.PartialOneofCase} */(jspb.Message.computeOneofCase(this, proto.jspb.test.TestMessageWithOneof.oneofGroups_[0]));
};

/**
 * @enum {number}
 */
proto.jspb.test.TestMessageWithOneof.RecursiveOneofCase = {
  RECURSIVE_ONEOF_NOT_SET: 0,
  RONE: 6,
  RTWO: 7
};

/**
 * @return {proto.jspb.test.TestMessageWithOneof.RecursiveOneofCase}
 */
proto.jspb.test.TestMessageWithOneof.prototype.getRecursiveOneofCase = function() {
  return /** @type {proto.jspb.test.TestMessageWithOneof.RecursiveOneofCase} */(jspb.Message.computeOneofCase(this, proto.jspb.test.TestMessageWithOneof.oneofGroups_[1]));
};

/**
 * @enum {number}
 */
proto.jspb.test.TestMessageWithOneof.DefaultOneofACase = {
  DEFAULT_ONEOF_A_NOT_SET: 0,
  AONE: 10,
  ATWO: 11
};

/**
 * @return {proto.jspb.test.TestMessageWithOneof.DefaultOneofACase}
 */
proto.jspb.test.TestMessageWithOneof.prototype.getDefaultOneofACase = function() {
  return /** @type {proto.jspb.test.TestMessageWithOneof.DefaultOneofACase} */(jspb.Message.computeOneofCase(this, proto.jspb.test.TestMessageWithOneof.oneofGroups_[2]));
};

/**
 * @enum {number}
 */
proto.jspb.test.TestMessageWithOneof.DefaultOneofBCase = {
  DEFAULT_ONEOF_B_NOT_SET: 0,
  BONE: 12,
  BTWO: 13
};

/**
 * @return {proto.jspb.test.TestMessageWithOneof.DefaultOneofBCase}
 */
proto.jspb.test.TestMessageWithOneof.prototype.getDefaultOneofBCase = function() {
  return /** @type {proto.jspb.test.TestMessageWithOneof.DefaultOneofBCase} */(jspb.Message.computeOneofCase(this, proto.jspb.test.TestMessageWithOneof.oneofGroups_[3]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.jspb.test.TestMessageWithOneof.prototype.toObject = function(opt_includeInstance) {
  return proto.jspb.test.TestMessageWithOneof.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.jspb.test.TestMessageWithOneof} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.jspb.test.TestMessageWithOneof.toObject = function(includeInstance, msg) {
  var f, obj = {
    pone: jspb.Message.getField(msg, 3),
    pthree: jspb.Message.getField(msg, 5),
    rone: (f = msg.getRone()) && proto.jspb.test.TestMessageWithOneof.toObject(includeInstance, f),
    rtwo: jspb.Message.getField(msg, 7),
    normalField: jspb.Message.getField(msg, 8),
    repeatedFieldList: jspb.Message.getRepeatedField(msg, 9),
    aone: jspb.Message.getFieldWithDefault(msg, 10, 1234),
    atwo: jspb.Message.getField(msg, 11),
    bone: jspb.Message.getField(msg, 12),
    btwo: jspb.Message.getFieldWithDefault(msg, 13, 1234)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.jspb.test.TestMessageWithOneof}
 */
proto.jspb.test.TestMessageWithOneof.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.jspb.test.TestMessageWithOneof;
  return proto.jspb.test.TestMessageWithOneof.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.jspb.test.TestMessageWithOneof} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.jspb.test.TestMessageWithOneof}
 */
proto.jspb.test.TestMessageWithOneof.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setPone(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setPthree(value);
      break;
    case 6:
      var value = new proto.jspb.test.TestMessageWithOneof;
      reader.readMessage(value,proto.jspb.test.TestMessageWithOneof.deserializeBinaryFromReader);
      msg.setRone(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setRtwo(value);
      break;
    case 8:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setNormalField(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.addRepeatedField(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setAone(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setAtwo(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setBone(value);
      break;
    case 13:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setBtwo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.jspb.test.TestMessageWithOneof.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.jspb.test.TestMessageWithOneof.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.jspb.test.TestMessageWithOneof} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.jspb.test.TestMessageWithOneof.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getRone();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.jspb.test.TestMessageWithOneof.serializeBinaryToWriter
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeString(
      7,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeBool(
      8,
      f
    );
  }
  f = message.getRepeatedFieldList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      9,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 10));
  if (f != null) {
    writer.writeInt32(
      10,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 11));
  if (f != null) {
    writer.writeInt32(
      11,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 12));
  if (f != null) {
    writer.writeInt32(
      12,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 13));
  if (f != null) {
    writer.writeInt32(
      13,
      f
    );
  }
};


/**
 * optional string pone = 3;
 * @return {string}
 */
proto.jspb.test.TestMessageWithOneof.prototype.getPone = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.jspb.test.TestMessageWithOneof.prototype.setPone = function(value) {
  jspb.Message.setOneofField(this, 3, proto.jspb.test.TestMessageWithOneof.oneofGroups_[0], value);
};


proto.jspb.test.TestMessageWithOneof.prototype.clearPone = function() {
  jspb.Message.setOneofField(this, 3, proto.jspb.test.TestMessageWithOneof.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.jspb.test.TestMessageWithOneof.prototype.hasPone = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string pthree = 5;
 * @return {string}
 */
proto.jspb.test.TestMessageWithOneof.prototype.getPthree = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.jspb.test.TestMessageWithOneof.prototype.setPthree = function(value) {
  jspb.Message.setOneofField(this, 5, proto.jspb.test.TestMessageWithOneof.oneofGroups_[0], value);
};


proto.jspb.test.TestMessageWithOneof.prototype.clearPthree = function() {
  jspb.Message.setOneofField(this, 5, proto.jspb.test.TestMessageWithOneof.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.jspb.test.TestMessageWithOneof.prototype.hasPthree = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional TestMessageWithOneof rone = 6;
 * @return {?proto.jspb.test.TestMessageWithOneof}
 */
proto.jspb.test.TestMessageWithOneof.prototype.getRone = function() {
  return /** @type{?proto.jspb.test.TestMessageWithOneof} */ (
    jspb.Message.getWrapperField(this, proto.jspb.test.TestMessageWithOneof, 6));
};


/** @param {?proto.jspb.test.TestMessageWithOneof|undefined} value */
proto.jspb.test.TestMessageWithOneof.prototype.setRone = function(value) {
  jspb.Message.setOneofWrapperField(this, 6, proto.jspb.test.TestMessageWithOneof.oneofGroups_[1], value);
};


proto.jspb.test.TestMessageWithOneof.prototype.clearRone = function() {
  this.setRone(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.jspb.test.TestMessageWithOneof.prototype.hasRone = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional string rtwo = 7;
 * @return {string}
 */
proto.jspb.test.TestMessageWithOneof.prototype.getRtwo = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/** @param {string} value */
proto.jspb.test.TestMessageWithOneof.prototype.setRtwo = function(value) {
  jspb.Message.setOneofField(this, 7, proto.jspb.test.TestMessageWithOneof.oneofGroups_[1], value);
};


proto.jspb.test.TestMessageWithOneof.prototype.clearRtwo = function() {
  jspb.Message.setOneofField(this, 7, proto.jspb.test.TestMessageWithOneof.oneofGroups_[1], undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.jspb.test.TestMessageWithOneof.prototype.hasRtwo = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional bool normal_field = 8;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.jspb.test.TestMessageWithOneof.prototype.getNormalField = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 8, false));
};


/** @param {boolean} value */
proto.jspb.test.TestMessageWithOneof.prototype.setNormalField = function(value) {
  jspb.Message.setField(this, 8, value);
};


proto.jspb.test.TestMessageWithOneof.prototype.clearNormalField = function() {
  jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.jspb.test.TestMessageWithOneof.prototype.hasNormalField = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * repeated string repeated_field = 9;
 * @return {!Array<string>}
 */
proto.jspb.test.TestMessageWithOneof.prototype.getRepeatedFieldList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 9));
};


/** @param {!Array<string>} value */
proto.jspb.test.TestMessageWithOneof.prototype.setRepeatedFieldList = function(value) {
  jspb.Message.setField(this, 9, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.jspb.test.TestMessageWithOneof.prototype.addRepeatedField = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 9, value, opt_index);
};


proto.jspb.test.TestMessageWithOneof.prototype.clearRepeatedFieldList = function() {
  this.setRepeatedFieldList([]);
};


/**
 * optional int32 aone = 10;
 * @return {number}
 */
proto.jspb.test.TestMessageWithOneof.prototype.getAone = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 1234));
};


/** @param {number} value */
proto.jspb.test.TestMessageWithOneof.prototype.setAone = function(value) {
  jspb.Message.setOneofField(this, 10, proto.jspb.test.TestMessageWithOneof.oneofGroups_[2], value);
};


proto.jspb.test.TestMessageWithOneof.prototype.clearAone = function() {
  jspb.Message.setOneofField(this, 10, proto.jspb.test.TestMessageWithOneof.oneofGroups_[2], undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.jspb.test.TestMessageWithOneof.prototype.hasAone = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional int32 atwo = 11;
 * @return {number}
 */
proto.jspb.test.TestMessageWithOneof.prototype.getAtwo = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/** @param {number} value */
proto.jspb.test.TestMessageWithOneof.prototype.setAtwo = function(value) {
  jspb.Message.setOneofField(this, 11, proto.jspb.test.TestMessageWithOneof.oneofGroups_[2], value);
};


proto.jspb.test.TestMessageWithOneof.prototype.clearAtwo = function() {
  jspb.Message.setOneofField(this, 11, proto.jspb.test.TestMessageWithOneof.oneofGroups_[2], undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.jspb.test.TestMessageWithOneof.prototype.hasAtwo = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional int32 bone = 12;
 * @return {number}
 */
proto.jspb.test.TestMessageWithOneof.prototype.getBone = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};


/** @param {number} value */
proto.jspb.test.TestMessageWithOneof.prototype.setBone = function(value) {
  jspb.Message.setOneofField(this, 12, proto.jspb.test.TestMessageWithOneof.oneofGroups_[3], value);
};


proto.jspb.test.TestMessageWithOneof.prototype.clearBone = function() {
  jspb.Message.setOneofField(this, 12, proto.jspb.test.TestMessageWithOneof.oneofGroups_[3], undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.jspb.test.TestMessageWithOneof.prototype.hasBone = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * optional int32 btwo = 13;
 * @return {number}
 */
proto.jspb.test.TestMessageWithOneof.prototype.getBtwo = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 13, 1234));
};


/** @param {number} value */
proto.jspb.test.TestMessageWithOneof.prototype.setBtwo = function(value) {
  jspb.Message.setOneofField(this, 13, proto.jspb.test.TestMessageWithOneof.oneofGroups_[3], value);
};


proto.jspb.test.TestMessageWithOneof.prototype.clearBtwo = function() {
  jspb.Message.setOneofField(this, 13, proto.jspb.test.TestMessageWithOneof.oneofGroups_[3], undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.jspb.test.TestMessageWithOneof.prototype.hasBtwo = function() {
  return jspb.Message.getField(this, 13) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.jspb.test.TestEndsWithBytes = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.jspb.test.TestEndsWithBytes, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.jspb.test.TestEndsWithBytes.displayName = 'proto.jspb.test.TestEndsWithBytes';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.jspb.test.TestEndsWithBytes.prototype.toObject = function(opt_includeInstance) {
  return proto.jspb.test.TestEndsWithBytes.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.jspb.test.TestEndsWithBytes} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.jspb.test.TestEndsWithBytes.toObject = function(includeInstance, msg) {
  var f, obj = {
    value: jspb.Message.getField(msg, 1),
    data: msg.getData_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.jspb.test.TestEndsWithBytes}
 */
proto.jspb.test.TestEndsWithBytes.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.jspb.test.TestEndsWithBytes;
  return proto.jspb.test.TestEndsWithBytes.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.jspb.test.TestEndsWithBytes} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.jspb.test.TestEndsWithBytes}
 */
proto.jspb.test.TestEndsWithBytes.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setValue(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.jspb.test.TestEndsWithBytes.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.jspb.test.TestEndsWithBytes.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.jspb.test.TestEndsWithBytes} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.jspb.test.TestEndsWithBytes.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional int32 value = 1;
 * @return {number}
 */
proto.jspb.test.TestEndsWithBytes.prototype.getValue = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.jspb.test.TestEndsWithBytes.prototype.setValue = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.jspb.test.TestEndsWithBytes.prototype.clearValue = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.jspb.test.TestEndsWithBytes.prototype.hasValue = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bytes data = 2;
 * @return {!(string|Uint8Array)}
 */
proto.jspb.test.TestEndsWithBytes.prototype.getData = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes data = 2;
 * This is a type-conversion wrapper around `getData()`
 * @return {string}
 */
proto.jspb.test.TestEndsWithBytes.prototype.getData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getData()));
};


/**
 * optional bytes data = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getData()`
 * @return {!Uint8Array}
 */
proto.jspb.test.TestEndsWithBytes.prototype.getData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getData()));
};


/** @param {!(string|Uint8Array)} value */
proto.jspb.test.TestEndsWithBytes.prototype.setData = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.jspb.test.TestEndsWithBytes.prototype.clearData = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.jspb.test.TestEndsWithBytes.prototype.hasData = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.jspb.test.Int64Types = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.jspb.test.Int64Types, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.jspb.test.Int64Types.displayName = 'proto.jspb.test.Int64Types';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.jspb.test.Int64Types.prototype.toObject = function(opt_includeInstance) {
  return proto.jspb.test.Int64Types.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.jspb.test.Int64Types} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.jspb.test.Int64Types.toObject = function(includeInstance, msg) {
  var f, obj = {
    int64Normal: jspb.Message.getField(msg, 1),
    int64String: jspb.Message.getField(msg, 2),
    int64Number: jspb.Message.getField(msg, 3)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.jspb.test.Int64Types}
 */
proto.jspb.test.Int64Types.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.jspb.test.Int64Types;
  return proto.jspb.test.Int64Types.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.jspb.test.Int64Types} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.jspb.test.Int64Types}
 */
proto.jspb.test.Int64Types.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setInt64Normal(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readSint64String());
      msg.setInt64String(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setInt64Number(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.jspb.test.Int64Types.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.jspb.test.Int64Types.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.jspb.test.Int64Types} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.jspb.test.Int64Types.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeSint64String(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeUint64(
      3,
      f
    );
  }
};


/**
 * optional int64 int64_normal = 1;
 * @return {number}
 */
proto.jspb.test.Int64Types.prototype.getInt64Normal = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.jspb.test.Int64Types.prototype.setInt64Normal = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.jspb.test.Int64Types.prototype.clearInt64Normal = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.jspb.test.Int64Types.prototype.hasInt64Normal = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional sint64 int64_string = 2;
 * @return {string}
 */
proto.jspb.test.Int64Types.prototype.getInt64String = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, "0"));
};


/** @param {string} value */
proto.jspb.test.Int64Types.prototype.setInt64String = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.jspb.test.Int64Types.prototype.clearInt64String = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.jspb.test.Int64Types.prototype.hasInt64String = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional uint64 int64_number = 3;
 * @return {number}
 */
proto.jspb.test.Int64Types.prototype.getInt64Number = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.jspb.test.Int64Types.prototype.setInt64Number = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.jspb.test.Int64Types.prototype.clearInt64Number = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.jspb.test.Int64Types.prototype.hasInt64Number = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.jspb.test.TestMapFieldsNoBinary = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.jspb.test.TestMapFieldsNoBinary, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.jspb.test.TestMapFieldsNoBinary.displayName = 'proto.jspb.test.TestMapFieldsNoBinary';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.jspb.test.TestMapFieldsNoBinary.prototype.toObject = function(opt_includeInstance) {
  return proto.jspb.test.TestMapFieldsNoBinary.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.jspb.test.TestMapFieldsNoBinary} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.jspb.test.TestMapFieldsNoBinary.toObject = function(includeInstance, msg) {
  var f, obj = {
    mapStringStringMap: (f = msg.getMapStringStringMap()) ? f.toObject(includeInstance, undefined) : [],
    mapStringInt32Map: (f = msg.getMapStringInt32Map()) ? f.toObject(includeInstance, undefined) : [],
    mapStringInt64Map: (f = msg.getMapStringInt64Map()) ? f.toObject(includeInstance, undefined) : [],
    mapStringBoolMap: (f = msg.getMapStringBoolMap()) ? f.toObject(includeInstance, undefined) : [],
    mapStringDoubleMap: (f = msg.getMapStringDoubleMap()) ? f.toObject(includeInstance, undefined) : [],
    mapStringEnumMap: (f = msg.getMapStringEnumMap()) ? f.toObject(includeInstance, undefined) : [],
    mapStringMsgMap: (f = msg.getMapStringMsgMap()) ? f.toObject(includeInstance, proto.jspb.test.MapValueMessageNoBinary.toObject) : [],
    mapInt32StringMap: (f = msg.getMapInt32StringMap()) ? f.toObject(includeInstance, undefined) : [],
    mapInt64StringMap: (f = msg.getMapInt64StringMap()) ? f.toObject(includeInstance, undefined) : [],
    mapBoolStringMap: (f = msg.getMapBoolStringMap()) ? f.toObject(includeInstance, undefined) : [],
    testMapFields: (f = msg.getTestMapFields()) && proto.jspb.test.TestMapFieldsNoBinary.toObject(includeInstance, f),
    mapStringTestmapfieldsMap: (f = msg.getMapStringTestmapfieldsMap()) ? f.toObject(includeInstance, proto.jspb.test.TestMapFieldsNoBinary.toObject) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.jspb.test.TestMapFieldsNoBinary}
 */
proto.jspb.test.TestMapFieldsNoBinary.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.jspb.test.TestMapFieldsNoBinary;
  return proto.jspb.test.TestMapFieldsNoBinary.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.jspb.test.TestMapFieldsNoBinary} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.jspb.test.TestMapFieldsNoBinary}
 */
proto.jspb.test.TestMapFieldsNoBinary.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = msg.getMapStringStringMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, "");
         });
      break;
    case 2:
      var value = msg.getMapStringInt32Map();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readInt32, null, "");
         });
      break;
    case 3:
      var value = msg.getMapStringInt64Map();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readInt64, null, "");
         });
      break;
    case 4:
      var value = msg.getMapStringBoolMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readBool, null, "");
         });
      break;
    case 5:
      var value = msg.getMapStringDoubleMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readDouble, null, "");
         });
      break;
    case 6:
      var value = msg.getMapStringEnumMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readEnum, null, "");
         });
      break;
    case 7:
      var value = msg.getMapStringMsgMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.jspb.test.MapValueMessageNoBinary.deserializeBinaryFromReader, "");
         });
      break;
    case 8:
      var value = msg.getMapInt32StringMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readInt32, jspb.BinaryReader.prototype.readString, null, 0);
         });
      break;
    case 9:
      var value = msg.getMapInt64StringMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readInt64, jspb.BinaryReader.prototype.readString, null, 0);
         });
      break;
    case 10:
      var value = msg.getMapBoolStringMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readBool, jspb.BinaryReader.prototype.readString, null, false);
         });
      break;
    case 11:
      var value = new proto.jspb.test.TestMapFieldsNoBinary;
      reader.readMessage(value,proto.jspb.test.TestMapFieldsNoBinary.deserializeBinaryFromReader);
      msg.setTestMapFields(value);
      break;
    case 12:
      var value = msg.getMapStringTestmapfieldsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.jspb.test.TestMapFieldsNoBinary.deserializeBinaryFromReader, "");
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.jspb.test.TestMapFieldsNoBinary.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.jspb.test.TestMapFieldsNoBinary.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.jspb.test.TestMapFieldsNoBinary} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.jspb.test.TestMapFieldsNoBinary.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMapStringStringMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(1, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
  f = message.getMapStringInt32Map(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(2, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeInt32);
  }
  f = message.getMapStringInt64Map(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(3, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeInt64);
  }
  f = message.getMapStringBoolMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(4, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeBool);
  }
  f = message.getMapStringDoubleMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(5, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeDouble);
  }
  f = message.getMapStringEnumMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(6, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeEnum);
  }
  f = message.getMapStringMsgMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(7, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.jspb.test.MapValueMessageNoBinary.serializeBinaryToWriter);
  }
  f = message.getMapInt32StringMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(8, writer, jspb.BinaryWriter.prototype.writeInt32, jspb.BinaryWriter.prototype.writeString);
  }
  f = message.getMapInt64StringMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(9, writer, jspb.BinaryWriter.prototype.writeInt64, jspb.BinaryWriter.prototype.writeString);
  }
  f = message.getMapBoolStringMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(10, writer, jspb.BinaryWriter.prototype.writeBool, jspb.BinaryWriter.prototype.writeString);
  }
  f = message.getTestMapFields();
  if (f != null) {
    writer.writeMessage(
      11,
      f,
      proto.jspb.test.TestMapFieldsNoBinary.serializeBinaryToWriter
    );
  }
  f = message.getMapStringTestmapfieldsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(12, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.jspb.test.TestMapFieldsNoBinary.serializeBinaryToWriter);
  }
};


/**
 * map<string, string> map_string_string = 1;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.jspb.test.TestMapFieldsNoBinary.prototype.getMapStringStringMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 1, opt_noLazyCreate,
      null));
};


proto.jspb.test.TestMapFieldsNoBinary.prototype.clearMapStringStringMap = function() {
  this.getMapStringStringMap().clear();
};


/**
 * map<string, int32> map_string_int32 = 2;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,number>}
 */
proto.jspb.test.TestMapFieldsNoBinary.prototype.getMapStringInt32Map = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,number>} */ (
      jspb.Message.getMapField(this, 2, opt_noLazyCreate,
      null));
};


proto.jspb.test.TestMapFieldsNoBinary.prototype.clearMapStringInt32Map = function() {
  this.getMapStringInt32Map().clear();
};


/**
 * map<string, int64> map_string_int64 = 3;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,number>}
 */
proto.jspb.test.TestMapFieldsNoBinary.prototype.getMapStringInt64Map = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,number>} */ (
      jspb.Message.getMapField(this, 3, opt_noLazyCreate,
      null));
};


proto.jspb.test.TestMapFieldsNoBinary.prototype.clearMapStringInt64Map = function() {
  this.getMapStringInt64Map().clear();
};


/**
 * map<string, bool> map_string_bool = 4;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,boolean>}
 */
proto.jspb.test.TestMapFieldsNoBinary.prototype.getMapStringBoolMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,boolean>} */ (
      jspb.Message.getMapField(this, 4, opt_noLazyCreate,
      null));
};


proto.jspb.test.TestMapFieldsNoBinary.prototype.clearMapStringBoolMap = function() {
  this.getMapStringBoolMap().clear();
};


/**
 * map<string, double> map_string_double = 5;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,number>}
 */
proto.jspb.test.TestMapFieldsNoBinary.prototype.getMapStringDoubleMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,number>} */ (
      jspb.Message.getMapField(this, 5, opt_noLazyCreate,
      null));
};


proto.jspb.test.TestMapFieldsNoBinary.prototype.clearMapStringDoubleMap = function() {
  this.getMapStringDoubleMap().clear();
};


/**
 * map<string, MapValueEnumNoBinary> map_string_enum = 6;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.jspb.test.MapValueEnumNoBinary>}
 */
proto.jspb.test.TestMapFieldsNoBinary.prototype.getMapStringEnumMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.jspb.test.MapValueEnumNoBinary>} */ (
      jspb.Message.getMapField(this, 6, opt_noLazyCreate,
      null));
};


proto.jspb.test.TestMapFieldsNoBinary.prototype.clearMapStringEnumMap = function() {
  this.getMapStringEnumMap().clear();
};


/**
 * map<string, MapValueMessageNoBinary> map_string_msg = 7;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.jspb.test.MapValueMessageNoBinary>}
 */
proto.jspb.test.TestMapFieldsNoBinary.prototype.getMapStringMsgMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.jspb.test.MapValueMessageNoBinary>} */ (
      jspb.Message.getMapField(this, 7, opt_noLazyCreate,
      proto.jspb.test.MapValueMessageNoBinary));
};


proto.jspb.test.TestMapFieldsNoBinary.prototype.clearMapStringMsgMap = function() {
  this.getMapStringMsgMap().clear();
};


/**
 * map<int32, string> map_int32_string = 8;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<number,string>}
 */
proto.jspb.test.TestMapFieldsNoBinary.prototype.getMapInt32StringMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<number,string>} */ (
      jspb.Message.getMapField(this, 8, opt_noLazyCreate,
      null));
};


proto.jspb.test.TestMapFieldsNoBinary.prototype.clearMapInt32StringMap = function() {
  this.getMapInt32StringMap().clear();
};


/**
 * map<int64, string> map_int64_string = 9;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<number,string>}
 */
proto.jspb.test.TestMapFieldsNoBinary.prototype.getMapInt64StringMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<number,string>} */ (
      jspb.Message.getMapField(this, 9, opt_noLazyCreate,
      null));
};


proto.jspb.test.TestMapFieldsNoBinary.prototype.clearMapInt64StringMap = function() {
  this.getMapInt64StringMap().clear();
};


/**
 * map<bool, string> map_bool_string = 10;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<boolean,string>}
 */
proto.jspb.test.TestMapFieldsNoBinary.prototype.getMapBoolStringMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<boolean,string>} */ (
      jspb.Message.getMapField(this, 10, opt_noLazyCreate,
      null));
};


proto.jspb.test.TestMapFieldsNoBinary.prototype.clearMapBoolStringMap = function() {
  this.getMapBoolStringMap().clear();
};


/**
 * optional TestMapFieldsNoBinary test_map_fields = 11;
 * @return {?proto.jspb.test.TestMapFieldsNoBinary}
 */
proto.jspb.test.TestMapFieldsNoBinary.prototype.getTestMapFields = function() {
  return /** @type{?proto.jspb.test.TestMapFieldsNoBinary} */ (
    jspb.Message.getWrapperField(this, proto.jspb.test.TestMapFieldsNoBinary, 11));
};


/** @param {?proto.jspb.test.TestMapFieldsNoBinary|undefined} value */
proto.jspb.test.TestMapFieldsNoBinary.prototype.setTestMapFields = function(value) {
  jspb.Message.setWrapperField(this, 11, value);
};


proto.jspb.test.TestMapFieldsNoBinary.prototype.clearTestMapFields = function() {
  this.setTestMapFields(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.jspb.test.TestMapFieldsNoBinary.prototype.hasTestMapFields = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * map<string, TestMapFieldsNoBinary> map_string_testmapfields = 12;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.jspb.test.TestMapFieldsNoBinary>}
 */
proto.jspb.test.TestMapFieldsNoBinary.prototype.getMapStringTestmapfieldsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.jspb.test.TestMapFieldsNoBinary>} */ (
      jspb.Message.getMapField(this, 12, opt_noLazyCreate,
      proto.jspb.test.TestMapFieldsNoBinary));
};


proto.jspb.test.TestMapFieldsNoBinary.prototype.clearMapStringTestmapfieldsMap = function() {
  this.getMapStringTestmapfieldsMap().clear();
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.jspb.test.MapValueMessageNoBinary = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.jspb.test.MapValueMessageNoBinary, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.jspb.test.MapValueMessageNoBinary.displayName = 'proto.jspb.test.MapValueMessageNoBinary';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.jspb.test.MapValueMessageNoBinary.prototype.toObject = function(opt_includeInstance) {
  return proto.jspb.test.MapValueMessageNoBinary.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.jspb.test.MapValueMessageNoBinary} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.jspb.test.MapValueMessageNoBinary.toObject = function(includeInstance, msg) {
  var f, obj = {
    foo: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.jspb.test.MapValueMessageNoBinary}
 */
proto.jspb.test.MapValueMessageNoBinary.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.jspb.test.MapValueMessageNoBinary;
  return proto.jspb.test.MapValueMessageNoBinary.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.jspb.test.MapValueMessageNoBinary} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.jspb.test.MapValueMessageNoBinary}
 */
proto.jspb.test.MapValueMessageNoBinary.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setFoo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.jspb.test.MapValueMessageNoBinary.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.jspb.test.MapValueMessageNoBinary.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.jspb.test.MapValueMessageNoBinary} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.jspb.test.MapValueMessageNoBinary.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * optional int32 foo = 1;
 * @return {number}
 */
proto.jspb.test.MapValueMessageNoBinary.prototype.getFoo = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.jspb.test.MapValueMessageNoBinary.prototype.setFoo = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.jspb.test.MapValueMessageNoBinary.prototype.clearFoo = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.jspb.test.MapValueMessageNoBinary.prototype.hasFoo = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.jspb.test.Deeply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.jspb.test.Deeply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.jspb.test.Deeply.displayName = 'proto.jspb.test.Deeply';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.jspb.test.Deeply.prototype.toObject = function(opt_includeInstance) {
  return proto.jspb.test.Deeply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.jspb.test.Deeply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.jspb.test.Deeply.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.jspb.test.Deeply}
 */
proto.jspb.test.Deeply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.jspb.test.Deeply;
  return proto.jspb.test.Deeply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.jspb.test.Deeply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.jspb.test.Deeply}
 */
proto.jspb.test.Deeply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.jspb.test.Deeply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.jspb.test.Deeply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.jspb.test.Deeply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.jspb.test.Deeply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.jspb.test.Deeply.Nested = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.jspb.test.Deeply.Nested, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.jspb.test.Deeply.Nested.displayName = 'proto.jspb.test.Deeply.Nested';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.jspb.test.Deeply.Nested.prototype.toObject = function(opt_includeInstance) {
  return proto.jspb.test.Deeply.Nested.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.jspb.test.Deeply.Nested} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.jspb.test.Deeply.Nested.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.jspb.test.Deeply.Nested}
 */
proto.jspb.test.Deeply.Nested.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.jspb.test.Deeply.Nested;
  return proto.jspb.test.Deeply.Nested.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.jspb.test.Deeply.Nested} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.jspb.test.Deeply.Nested}
 */
proto.jspb.test.Deeply.Nested.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.jspb.test.Deeply.Nested.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.jspb.test.Deeply.Nested.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.jspb.test.Deeply.Nested} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.jspb.test.Deeply.Nested.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.jspb.test.Deeply.Nested.Message = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.jspb.test.Deeply.Nested.Message, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.jspb.test.Deeply.Nested.Message.displayName = 'proto.jspb.test.Deeply.Nested.Message';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.jspb.test.Deeply.Nested.Message.prototype.toObject = function(opt_includeInstance) {
  return proto.jspb.test.Deeply.Nested.Message.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.jspb.test.Deeply.Nested.Message} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.jspb.test.Deeply.Nested.Message.toObject = function(includeInstance, msg) {
  var f, obj = {
    count: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.jspb.test.Deeply.Nested.Message}
 */
proto.jspb.test.Deeply.Nested.Message.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.jspb.test.Deeply.Nested.Message;
  return proto.jspb.test.Deeply.Nested.Message.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.jspb.test.Deeply.Nested.Message} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.jspb.test.Deeply.Nested.Message}
 */
proto.jspb.test.Deeply.Nested.Message.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.jspb.test.Deeply.Nested.Message.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.jspb.test.Deeply.Nested.Message.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.jspb.test.Deeply.Nested.Message} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.jspb.test.Deeply.Nested.Message.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * optional int32 count = 1;
 * @return {number}
 */
proto.jspb.test.Deeply.Nested.Message.prototype.getCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.jspb.test.Deeply.Nested.Message.prototype.setCount = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.jspb.test.Deeply.Nested.Message.prototype.clearCount = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.jspb.test.Deeply.Nested.Message.prototype.hasCount = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * @enum {number}
 */
proto.jspb.test.OuterEnum = {
  FOO: 1,
  BAR: 2
};

/**
 * @enum {number}
 */
proto.jspb.test.MapValueEnumNoBinary = {
  MAP_VALUE_FOO_NOBINARY: 0,
  MAP_VALUE_BAR_NOBINARY: 1,
  MAP_VALUE_BAZ_NOBINARY: 2
};


/**
 * A tuple of {field number, class constructor} for the extension
 * field named `simple1`.
 * @type {!jspb.ExtensionFieldInfo<!proto.jspb.test.Simple1>}
 */
proto.jspb.test.simple1 = new jspb.ExtensionFieldInfo(
    105,
    {simple1: 0},
    proto.jspb.test.Simple1,
     /** @type {?function((boolean|undefined),!jspb.Message=): !Object} */ (
         proto.jspb.test.Simple1.toObject),
    0);

proto.jspb.test.HasExtensions.extensionsBinary[105] = new jspb.ExtensionFieldBinaryInfo(
    proto.jspb.test.simple1,
    jspb.BinaryReader.prototype.readMessage,
    jspb.BinaryWriter.prototype.writeMessage,
    proto.jspb.test.Simple1.serializeBinaryToWriter,
    proto.jspb.test.Simple1.deserializeBinaryFromReader,
    false);
// This registers the extension field with the extended class, so that
// toObject() will function correctly.
proto.jspb.test.HasExtensions.extensions[105] = proto.jspb.test.simple1;

goog.object.extend(exports, proto.jspb.test);
