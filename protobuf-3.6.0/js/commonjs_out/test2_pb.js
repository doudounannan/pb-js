/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var test_pb = require('./test_pb.js');
goog.exportSymbol('proto.jspb.test.ExtensionMessage', null, global);
goog.exportSymbol('proto.jspb.test.ForeignNestedFieldMessage', null, global);
goog.exportSymbol('proto.jspb.test.TestExtensionsMessage', null, global);
goog.exportSymbol('proto.jspb.test.floatingMsgField', null, global);
goog.exportSymbol('proto.jspb.test.floatingStrField', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.jspb.test.TestExtensionsMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, 2, null, null);
};
goog.inherits(proto.jspb.test.TestExtensionsMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.jspb.test.TestExtensionsMessage.displayName = 'proto.jspb.test.TestExtensionsMessage';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.jspb.test.TestExtensionsMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.jspb.test.TestExtensionsMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.jspb.test.TestExtensionsMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.jspb.test.TestExtensionsMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    intfield: jspb.Message.getField(msg, 1)
  };

  jspb.Message.toObjectExtension(/** @type {!jspb.Message} */ (msg), obj,
      proto.jspb.test.TestExtensionsMessage.extensions, proto.jspb.test.TestExtensionsMessage.prototype.getExtension,
      includeInstance);
  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.jspb.test.TestExtensionsMessage}
 */
proto.jspb.test.TestExtensionsMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.jspb.test.TestExtensionsMessage;
  return proto.jspb.test.TestExtensionsMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.jspb.test.TestExtensionsMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.jspb.test.TestExtensionsMessage}
 */
proto.jspb.test.TestExtensionsMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setIntfield(value);
      break;
    default:
      jspb.Message.readBinaryExtension(msg, reader, proto.jspb.test.TestExtensionsMessage.extensionsBinary,
        proto.jspb.test.TestExtensionsMessage.prototype.getExtension,
        proto.jspb.test.TestExtensionsMessage.prototype.setExtension);
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.jspb.test.TestExtensionsMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.jspb.test.TestExtensionsMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.jspb.test.TestExtensionsMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.jspb.test.TestExtensionsMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  jspb.Message.serializeBinaryExtensions(message, writer,
    proto.jspb.test.TestExtensionsMessage.extensionsBinary, proto.jspb.test.TestExtensionsMessage.prototype.getExtension);
};


/**
 * optional int32 intfield = 1;
 * @return {number}
 */
proto.jspb.test.TestExtensionsMessage.prototype.getIntfield = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.jspb.test.TestExtensionsMessage.prototype.setIntfield = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.jspb.test.TestExtensionsMessage.prototype.clearIntfield = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.jspb.test.TestExtensionsMessage.prototype.hasIntfield = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * The extensions registered with this message class. This is a map of
 * extension field number to fieldInfo object.
 *
 * For example:
 *     { 123: {fieldIndex: 123, fieldName: {my_field_name: 0}, ctor: proto.example.MyMessage} }
 *
 * fieldName contains the JsCompiler renamed field name property so that it
 * works in OPTIMIZED mode.
 *
 * @type {!Object<number, jspb.ExtensionFieldInfo>}
 */
proto.jspb.test.TestExtensionsMessage.extensions = {};


/**
 * The extensions registered with this message class. This is a map of
 * extension field number to fieldInfo object.
 *
 * For example:
 *     { 123: {fieldIndex: 123, fieldName: {my_field_name: 0}, ctor: proto.example.MyMessage} }
 *
 * fieldName contains the JsCompiler renamed field name property so that it
 * works in OPTIMIZED mode.
 *
 * @type {!Object<number, jspb.ExtensionFieldBinaryInfo>}
 */
proto.jspb.test.TestExtensionsMessage.extensionsBinary = {};


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.jspb.test.ExtensionMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.jspb.test.ExtensionMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.jspb.test.ExtensionMessage.displayName = 'proto.jspb.test.ExtensionMessage';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.jspb.test.ExtensionMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.jspb.test.ExtensionMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.jspb.test.ExtensionMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.jspb.test.ExtensionMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    ext1: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.jspb.test.ExtensionMessage}
 */
proto.jspb.test.ExtensionMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.jspb.test.ExtensionMessage;
  return proto.jspb.test.ExtensionMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.jspb.test.ExtensionMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.jspb.test.ExtensionMessage}
 */
proto.jspb.test.ExtensionMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setExt1(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.jspb.test.ExtensionMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.jspb.test.ExtensionMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.jspb.test.ExtensionMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.jspb.test.ExtensionMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
};



/**
 * A tuple of {field number, class constructor} for the extension
 * field named `extField`.
 * @type {!jspb.ExtensionFieldInfo<!proto.jspb.test.ExtensionMessage>}
 */
proto.jspb.test.ExtensionMessage.extField = new jspb.ExtensionFieldInfo(
    100,
    {extField: 0},
    proto.jspb.test.ExtensionMessage,
     /** @type {?function((boolean|undefined),!jspb.Message=): !Object} */ (
         proto.jspb.test.ExtensionMessage.toObject),
    0);

proto.jspb.test.TestExtensionsMessage.extensionsBinary[100] = new jspb.ExtensionFieldBinaryInfo(
    proto.jspb.test.ExtensionMessage.extField,
    jspb.BinaryReader.prototype.readMessage,
    jspb.BinaryWriter.prototype.writeMessage,
    proto.jspb.test.ExtensionMessage.serializeBinaryToWriter,
    proto.jspb.test.ExtensionMessage.deserializeBinaryFromReader,
    false);
// This registers the extension field with the extended class, so that
// toObject() will function correctly.
proto.jspb.test.TestExtensionsMessage.extensions[100] = proto.jspb.test.ExtensionMessage.extField;

/**
 * optional string ext1 = 1;
 * @return {string}
 */
proto.jspb.test.ExtensionMessage.prototype.getExt1 = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.jspb.test.ExtensionMessage.prototype.setExt1 = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.jspb.test.ExtensionMessage.prototype.clearExt1 = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.jspb.test.ExtensionMessage.prototype.hasExt1 = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * A tuple of {field number, class constructor} for the extension
 * field named `extField`.
 * @type {!jspb.ExtensionFieldInfo<!proto.jspb.test.ExtensionMessage>}
 */
proto.jspb.test.ExtensionMessage.extField = new jspb.ExtensionFieldInfo(
    100,
    {extField: 0},
    proto.jspb.test.ExtensionMessage,
     /** @type {?function((boolean|undefined),!jspb.Message=): !Object} */ (
         proto.jspb.test.ExtensionMessage.toObject),
    0);

proto.jspb.test.TestExtensionsMessage.extensionsBinary[100] = new jspb.ExtensionFieldBinaryInfo(
    proto.jspb.test.ExtensionMessage.extField,
    jspb.BinaryReader.prototype.readMessage,
    jspb.BinaryWriter.prototype.writeMessage,
    proto.jspb.test.ExtensionMessage.serializeBinaryToWriter,
    proto.jspb.test.ExtensionMessage.deserializeBinaryFromReader,
    false);
// This registers the extension field with the extended class, so that
// toObject() will function correctly.
proto.jspb.test.TestExtensionsMessage.extensions[100] = proto.jspb.test.ExtensionMessage.extField;


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.jspb.test.ForeignNestedFieldMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.jspb.test.ForeignNestedFieldMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.jspb.test.ForeignNestedFieldMessage.displayName = 'proto.jspb.test.ForeignNestedFieldMessage';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.jspb.test.ForeignNestedFieldMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.jspb.test.ForeignNestedFieldMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.jspb.test.ForeignNestedFieldMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.jspb.test.ForeignNestedFieldMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    deeplyNestedMessage: (f = msg.getDeeplyNestedMessage()) && test_pb.Deeply.Nested.Message.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.jspb.test.ForeignNestedFieldMessage}
 */
proto.jspb.test.ForeignNestedFieldMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.jspb.test.ForeignNestedFieldMessage;
  return proto.jspb.test.ForeignNestedFieldMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.jspb.test.ForeignNestedFieldMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.jspb.test.ForeignNestedFieldMessage}
 */
proto.jspb.test.ForeignNestedFieldMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new test_pb.Deeply.Nested.Message;
      reader.readMessage(value,test_pb.Deeply.Nested.Message.deserializeBinaryFromReader);
      msg.setDeeplyNestedMessage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.jspb.test.ForeignNestedFieldMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.jspb.test.ForeignNestedFieldMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.jspb.test.ForeignNestedFieldMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.jspb.test.ForeignNestedFieldMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDeeplyNestedMessage();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      test_pb.Deeply.Nested.Message.serializeBinaryToWriter
    );
  }
};


/**
 * optional Deeply.Nested.Message deeply_nested_message = 1;
 * @return {?proto.jspb.test.Deeply.Nested.Message}
 */
proto.jspb.test.ForeignNestedFieldMessage.prototype.getDeeplyNestedMessage = function() {
  return /** @type{?proto.jspb.test.Deeply.Nested.Message} */ (
    jspb.Message.getWrapperField(this, test_pb.Deeply.Nested.Message, 1));
};


/** @param {?proto.jspb.test.Deeply.Nested.Message|undefined} value */
proto.jspb.test.ForeignNestedFieldMessage.prototype.setDeeplyNestedMessage = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.jspb.test.ForeignNestedFieldMessage.prototype.clearDeeplyNestedMessage = function() {
  this.setDeeplyNestedMessage(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.jspb.test.ForeignNestedFieldMessage.prototype.hasDeeplyNestedMessage = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * A tuple of {field number, class constructor} for the extension
 * field named `floatingMsgField`.
 * @type {!jspb.ExtensionFieldInfo<!proto.jspb.test.ExtensionMessage>}
 */
proto.jspb.test.floatingMsgField = new jspb.ExtensionFieldInfo(
    101,
    {floatingMsgField: 0},
    proto.jspb.test.ExtensionMessage,
     /** @type {?function((boolean|undefined),!jspb.Message=): !Object} */ (
         proto.jspb.test.ExtensionMessage.toObject),
    0);

proto.jspb.test.TestExtensionsMessage.extensionsBinary[101] = new jspb.ExtensionFieldBinaryInfo(
    proto.jspb.test.floatingMsgField,
    jspb.BinaryReader.prototype.readMessage,
    jspb.BinaryWriter.prototype.writeMessage,
    proto.jspb.test.ExtensionMessage.serializeBinaryToWriter,
    proto.jspb.test.ExtensionMessage.deserializeBinaryFromReader,
    false);
// This registers the extension field with the extended class, so that
// toObject() will function correctly.
proto.jspb.test.TestExtensionsMessage.extensions[101] = proto.jspb.test.floatingMsgField;


/**
 * A tuple of {field number, class constructor} for the extension
 * field named `floatingStrField`.
 * @type {!jspb.ExtensionFieldInfo<string>}
 */
proto.jspb.test.floatingStrField = new jspb.ExtensionFieldInfo(
    102,
    {floatingStrField: 0},
    null,
     /** @type {?function((boolean|undefined),!jspb.Message=): !Object} */ (
         null),
    0);

proto.jspb.test.TestExtensionsMessage.extensionsBinary[102] = new jspb.ExtensionFieldBinaryInfo(
    proto.jspb.test.floatingStrField,
    jspb.BinaryReader.prototype.readString,
    jspb.BinaryWriter.prototype.writeString,
    undefined,
    undefined,
    false);
// This registers the extension field with the extended class, so that
// toObject() will function correctly.
proto.jspb.test.TestExtensionsMessage.extensions[102] = proto.jspb.test.floatingStrField;

goog.object.extend(exports, proto.jspb.test);
